AWSTemplateFormatVersion: '2010-09-09'

Description: Amazon AWS EC2 template for Basic IDOL deployment (static servers)

Parameters:
  StaticServersInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the static servers instance'
    Default: t2.medium
    AllowedValues: [
                    "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnetCIDR:
    Type: String
  PublicSubnetCIDR:
    Type: String
  LicenseServerPrivateIp:
    Type: String
  ContentWaitData:
    Type: String
  DAHPrivateIp:
    Type: String
  DIHPrivateIp:
    Type: String
  NiFiPrivateIp:
    Type: String
  PrivateSubnet:
    Type: String
  PrivateProfile:
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      IDOLStaticServers: ami-055fb5b2d4cde6ac5

Resources:
  IdolUIsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to UI ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref PublicSubnetCIDR

  IdolAgentstoreSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Agentstore Index ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9050
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9050
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9051
          ToPort: 9051
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9052
          ToPort: 9052
          CidrIp: !Ref PrivateSubnetCIDR

  CommunitySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable local access to Community ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9030
          ToPort: 9030
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9032
          ToPort: 9032
          CidrIp: !Ref PrivateSubnetCIDR

  ViewSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable local access to View ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9082
          ToPort: 9082
          CidrIp: !Ref PrivateSubnetCIDR


  IdolStaticServersInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup:
            - configInstanceSetup
          startAgentstore:
            - configStartAgentstore
          startCommunity:
            - configStartCommunity
          bootstrapUsers:
            - configBootstrapUsers
          startView:
            - configStartView
          startController:
            - configStartController
          addServicesToController:
            - configAddServicesToController
          startCoordinator:
            - configStartCoordinator
          addControllers:
            - configAddControllers
          startUIs:
            - configStartUIs

        configInstanceSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolStaticServersInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region}
                runas=root
            /opt/setup/edit_hosts_file.sh:
              content: !Sub 
                - |
                  #!/bin/bash -xe

                  function applyContentHostNames() {
                    CONTENT_IPS=$(echo '${ContentWaitData}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                    CONTENT_COUNT=0
                    for ip in $CONTENT_IPS
                    do
                        echo "$ip    content-instance-$CONTENT_COUNT" >> /etc/hosts
                        CONTENT_COUNT=$((CONTENT_COUNT+1))
                    done
                  }

                  echo "127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance" > /etc/hosts
                  echo "::1          localhost6 localhost6.localdomain6" >> /etc/hosts
                  applyContentHostNames
                  echo "${DAHPrivateIp}    dah-instance" >> /etc/hosts
                  echo "${DIHPrivateIp}    dih-instance" >> /etc/hosts
                  echo "${LicenseServerPrivateIp}    license-server-instance" >> /etc/hosts
                - LicenseServerPrivateIp: !Ref LicenseServerPrivateIp
                  ContentWaitData: !Ref ContentWaitData
                  DAHPrivateIp: !Ref DAHPrivateIp
                  DIHPrivateIp: !Ref DIHPrivateIp
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-editHostsFile:
              command: "/opt/setup/edit_hosts_file.sh"

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf


        configStartAgentstore:
          commands:
            01-useAgentstoreConfig:
              command: "mv /opt/content/alt_configs/agentstore.cfg /opt/content/content.cfg"
            01a-setAgentstoreConfigOwner:
              command: "chown idol:idol content.cfg"
              cwd: "/opt/content"
            02-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/content/idol.common.cfg"
            03-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/content/idol.common.cfg"
            04-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/XXX_ACI_THREADS_XXX/$ACI_THREADS/g\" /opt/content/content.cfg"
            05-setServiceACIPort:
              command: "sed -i \"s/ACIPORT=9100/ACIPORT=9050/\" /etc/init.d/content"
            06-setServiceServicePort:
              command: "sed -i \"s/SERVICEPORT=9102/SERVICEPORT=9052/\" /etc/init.d/content"

          services:
            sysvinit:
              content:
                enabled: true
                ensureRunning: true

        configStartCommunity:
          files:
            /opt/community/bootstrap_users.sh:
              content: |
                #!/bin/bash -xe

                function bootstrapUsers() {
                    local ADMIN_USERNAME=admin
                    local ADMIN_PASSWORD=$(cat /opt/community/random_password.txt)
                    local HTTP_SCHEME=http
                    local COMMUNITY_PORT=9030

                    if [ -e adduser.admin.xml ]
                    then
                        echo "Community already bootstrapped"
                    else
                        echo "Bootstrapping community"
                        wget -qO adduser.admin.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=UserAdd&userName=$ADMIN_USERNAME&password=$ADMIN_PASSWORD" --no-check-certificate
                        for role in FindUser FindAdmin FindBI useradmin
                        do
                            wget -qO addrole.$role.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAdd&roleName=$role" --no-check-certificate
                            wget -qO addrole.$role.admin.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAddUserToRole&RoleName=$role&userName=$ADMIN_USERNAME" --no-check-certificate
                        done
                    fi
                }

                bootstrapUsers
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/community/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/community/idol.common.cfg"
            03-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/community/community.cfg"
            04-setDataDREHost:
              command: "sed -i \"0,/host=localhost/{s/host=localhost/host=dah-instance/}\" /opt/community/community.cfg"
            05-setDataDREPort:
              command: "sed -i \"0,/aciport=9100/{s/aciport=9100/aciport=9060/}\" /opt/community/community.cfg"
            06-setSecurityInfoKeysPath:
              command: "sed -i \"s/SecurityInfoKeys=\\/path\\/to\\/aes.keyfile/SecurityInfoKeys=\\/opt\\/community\\/aes.key/\" /opt/community/community.cfg"
            07-createAESKey:
              command: "/opt/community/autpassword.exe -x -tAES -oKeyFile=/opt/community/aes.key"
            07a-setAESKeyOwner:
              command: "chown idol:idol aes.key"
              cwd: "/opt/community"
            08-createPasswordFile:
              command: "openssl rand -hex 16 > /opt/community/random_password.txt"

          services:
            sysvinit:
              community:
                enabled: true
                ensureRunning: true

        configBootstrapUsers:
          commands:
            01-bootstrapUsers:
              command: "/opt/community/bootstrap_users.sh"

        configStartView:
          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/view/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/view/idol.common.cfg"
            03-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/view/view.cfg"
            04-setDataDREHost:
              command: "sed -i \"s/IDOLPort=9060/IDOLPort=9050/\" /opt/view/view.cfg"
            05-updateViewCfg:
              command: !Sub 
                - | 
                  sed -i 's#\[Viewing\]#[UniversalViewing]\
                  Enabled=TRUE\
                  DocumentStoreHost=dah-instance\
                  DocumentStorePort=9060\
                  DistributedConnectorReferenceField=AUTN_IDENTIFIER\
                  FileSystemReferenceField=ORIGINAL_LOCATION\
                  ConnectorGroupField=CONNECTOR_GROUP\
                  \
                  [Viewing]\
                  DistributedConnectorHost=${NiFiPrivateIp}\
                  DistributedConnectorPort=10000\
                  LegacyRendering=TRUE\
                  #' /opt/view/view.cfg
                - NiFiPrivateIp: !Ref NiFiPrivateIp

          services:
            sysvinit:
              view:
                enabled: true
                ensureRunning: true

        configStartController:
          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/controller/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true

        configAddServicesToController:
          commands:
            01-addContentToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/content/content.exe&type=content&name=agentstore&InitScriptPath=/etc/init.d/content"'
            02-addCommunityToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/community/community.exe&type=community&name=community&InitScriptPath=/etc/init.d/community"'
            03-addViewToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/view/view.exe&type=view&name=view&InitScriptPath=/etc/init.d/view"'

        configStartCoordinator:
          files:
            /opt/coordinator/register_content_engine_controllers.sh:
              content: !Sub 
                - |
                  #!/bin/bash -xe

                  function registerContentEngineControllers() {
                    #Parse Content IP addresses and register their controllers
                    NUM_CONTENT_IPS=$(echo '${ContentWaitData}' | python -c "import sys, json; print len(json.load(sys.stdin).values())")
                    LOOP_MAX=$((NUM_CONTENT_IPS-1))
                    i=0
                    while [[ $i -le $LOOP_MAX ]]
                    do
                        RESP=$(curl "http://localhost:40200/action=addController&connectByHostName=true&HostName=content-instance-$i&Port=41200")
                        echo $RESP
                        ((i = i + 1))
                    done
                  }

                  registerContentEngineControllers
                - ContentWaitData: !Ref ContentWaitData
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-setLicenseHost:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/coordinator/idol.common.cfg"
            02-setRoleClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/coordinator/idol.common.cfg"

          services:
            sysvinit:
              coordinator:
                enabled: true
                ensureRunning: true

        configAddControllers:
          commands:
            01-addContents:
              command: "/opt/coordinator/register_content_engine_controllers.sh"
            02-addDAH:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dah-instance&Port=41200\""
            03-addDIH:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dih-instance&Port=41200\""
            04-addStaticServers:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=static-servers-instance&Port=41200\""
            05-addLicenseServer:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=license-server-instance&Port=41200\""
              


        configStartUIs:
          packages:
            yum:
              jq: []

          commands:
            01-adjustFindHomePermissions:
              command: "chmod -R 777 home"
              cwd: "/opt/find"
            02-configureFind:
              command: "jq '.login.community.host = \"localhost\"' config.json | jq '.login.defaultLogin.username=null' | jq '.login.defaultLogin.password=null' | jq '.login.method=\"autonomy\"' | jq '.content.host = \"dah-instance\"' | jq '.content.port = 9060' | jq '.view.host = \"localhost\"' | jq '.mmap.enabled = false' > config_rewrite.json"
              cwd: "/opt/find/home"
            03-useNewFindConfiguration:
              command: "mv config_rewrite.json config.json"
              cwd: "/opt/find/home"
            04-setFindConfigOwner:
              command: "chown find:find config.json"
              cwd: "/opt/find/home"
            05-resetFindHomePermissions:
              command: "chmod 755 home && chmod 664 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*"
              cwd: "/opt/find"
            06-adjustSiteAdminHomePermissions:
              command: "chmod -R 777 home"
              cwd: "/opt/siteadmin"
            07-configureSiteAdmin:
              command: "jq '.login.defaultLogin.username = null' config.json | jq '.login.defaultLogin.password = null' | jq '.login.method = \"autonomy\"' | jq '.login.community.host = \"localhost\"' | jq '.coordinator.host = \"localhost\"' > config_rewrite.json"
              cwd: "/opt/siteadmin/home"
            08-useNewSiteAdminConfiguration:
              command: "mv config_rewrite.json config.json"
              cwd: "/opt/siteadmin/home"
            09-setSiteAdminConfigOwner:
              command: "chown siteadmin:siteadmin config.json"
              cwd: "/opt/siteadmin/home"
            10-adresetSiteAdminHomePermissions:
              command: "chmod 755 home && chmod 644 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*"
              cwd: "/opt/siteadmin"

          services:
            sysvinit:
              find:
                enabled: true
                ensureRunning: true
              siteadmin:
                enabled: true
                ensureRunning: true

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

    Properties:
      IamInstanceProfile: !Ref PrivateProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLStaticServers ]
      InstanceType: !Ref StaticServersInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt IdolUIsSecurityGroup.GroupId
        - !GetAtt IdolAgentstoreSecurityGroup.GroupId
        - !GetAtt CommunitySG.GroupId
        - !GetAtt ViewSG.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          # do we need some error handling between thene cfn-inits?
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c instanceSetup &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startAgentstore &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startCommunity &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c bootstrapUsers &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startView &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startController &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c addServicesToController &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startCoordinator &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c addControllers &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startUIs
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region}

Outputs:
  StaticServersPrivateIP:
    Value: !GetAtt IdolStaticServersInstance.PrivateIp
