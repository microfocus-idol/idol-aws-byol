{
    "Parameters": {
        "ServerInstanceType": {
            "Type": "String",
            "Default": "c5d.2xlarge",
            "AllowedValues": ["t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge",
                "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge",
                "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge",
                "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "d2.xlarge", "d2.2xlarge",
                "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge",
                "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i3.large", "i3.xlarge", "i3.2xlarge",
                "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge",
                "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge",
                "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge",
                "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge",
                "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge",
                "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                "p4d.24xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge",
                "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large",
                "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge",
                "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge",
                "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge",
                "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "z1d.large",
                "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
            ],
            "Description": "AWS EC2 InstanceType for the server instance"
        },
        "LicenseKeyBucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "The bucket name can include numbers, lowercase letters, uppercase\nletters, and hyphens (-). It cannot start or end with a hyphen (-)",
            "Description": "Name of S3 bucket containing license key to deploy"
        },
        "LicenseKeyBucketRegion": {
            "Type": "String",
            "AllowedValues": ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "af-south-1", "ap-east-1", "ap-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-2", "ap-southeast-1",
                "ap-southeast-2", "ca-central-1", "eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-south-1", "eu-north-1", "me-south-1", "sa-east-1", "us-gov-east-1", "us-gov-west-1"
            ],
            "Description": "The AWS Region where the S3 bucket containing the license key (LicenseKeyBucketName) is hosted."
        },
        "LicenseKeyBucketPath": {
            "Type": "String",
            "Default": "licensekey.dat",
            "Description": "Path to license key within the bucket"
        },
        "NiFiS3Bucket": {
            "Type": "String",
            "Description": "S3 Bucket to ingest"
        },
        "NiFiS3AccessKey": {
            "Type": "String",
            "Description": "AWS Access Key with access to S3 bucket",
            "NoEcho": true
        },
        "NiFiS3SecretKey": {
            "Type": "String",
            "Description": "AWS Secret Key with access to S3 bucket",
            "NoEcho": true
        },
        "EmailAddress": {
            "Type": "String",
            "Description": "Value to use in the Email Address field of the self-signed certificate"
        },
        "Country": {
            "Type": "String",
            "Description": "Value to use in the Country field of the self-signed certificate"
        },
        "Locality": {
            "Type": "String",
            "Description": "Value to use in the Locality field of the self-signed certificate"
        },
        "StateProvinceCounty": {
            "Type": "String",
            "Description": "Value to use in the State/Province/County field of the self-signed certificate"
        },
        "Organisation": {
            "Type": "String",
            "Description": "Value to use in the Organisation field of the self-signed certificate"
        },
        "OrganisationalUnit": {
            "Type": "String",
            "Description": "Value to use in the Organisational Unit field of the self-signed certificate"
        },
        "VPCCIDR": {
            "Type": "String",
            "AllowedPattern": "((2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})\\.){3}(2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})/(2[0-7]|1[0-9]|[0-9])",
            "ConstraintDescription": "must be a valid IPv4 CIDR with smallest block of /27",
            "Description": "The CIDR of the VPC. Smallest block /27; e.g. 172.16.0.0/27."
        },
        "PublicSubnetCIDR": {
            "Type": "String",
            "AllowedPattern": "((2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})\\.){3}(2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})/(2[0-8]|1[0-9]|[0-9])",
            "ConstraintDescription": "must be a valid IPv4 CIDR with smallest block of /28",
            "Description": "The CIDR of the Public Subnet. Subnet of VpcCIDR, disjoint of PrivateSubnetCIDR, smallest block /28 e.g. 172.16.0.0/28."
        },
        "PrivateSubnetCIDR": {
            "Type": "String",
            "AllowedPattern": "((2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})\\.){3}(2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})/(2[0-8]|1[0-9]|[0-9])",
            "ConstraintDescription": "must be a valid IPv4 CIDR with smallest block of /28",
            "Description": "The CIDR of the Private Subnet. Subnet of VpcCIDR, disjoint of PublicSubnetCIDR, smallest block /28 e.g. 172.16.0.16/28."
        },
        "PublicAccessCIDR": {
            "Type": "String",
            "AllowedPattern": "((2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})\\.){3}(2[0-4]\\d|25[0-5]|1\\d{2}|\\d{1,2})/(3[012]|[12]?\\d)",
            "ConstraintDescription": "must be a valid IPv4 CIDR",
            "Description": "The CIDR of IP addresses allowed to access the \"public\" interfaces of the system"
        }
    },
    "Resources": {
        "NetworkStackNestedStackNetworkStackNestedStackResource551D4040": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://idol-templates.s3.amazonaws.com/NetworkStack.json",
                "Parameters": {
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "PrivateSubnetCIDR": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "PublicSubnetCIDR": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "PublicAccessCIDR": {
                        "Ref": "PublicAccessCIDR"
                    }
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
        },
        "ByolSingleEc2StackrootRoleC290A1F9": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": {
                                "Fn::Join": ["", ["ec2.", {
                                    "Ref": "AWS::URLSuffix"
                                }]]
                            }
                        }
                    }],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [{
                    "Fn::Join": ["", ["arn:", {
                        "Ref": "AWS::Partition"
                    }, ":iam::aws:policy/AmazonSSMManagedInstanceCore"]]
                }, {
                    "Fn::Join": ["", ["arn:", {
                        "Ref": "AWS::Partition"
                    }, ":iam::aws:policy/AWSMarketplaceMeteringFullAccess"]]
                }],
                "Path": "/",
                "Policies": [{
                    "PolicyDocument": {
                        "Statement": [{
                            "Action": "s3:GetObject",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:s3:::", {
                                    "Ref": "LicenseKeyBucketName"
                                }, "/", {
                                    "Ref": "LicenseKeyBucketPath"
                                }]]
                            }
                        }],
                        "Version": "2012-10-17"
                    },
                    "PolicyName": "S3Access"
                }, {
                    "PolicyDocument": {
                        "Statement": [{
                            "Action": "ecr:GetAuthorizationToken",
                            "Effect": "Allow",
                            "Resource": "*"
                        }, {
                            "Action": ["ecr:BatchGetImage", "ecr:GetDownloadUrlForLayer"],
                            "Effect": "Allow",
                            "Resource": "arn:aws:ecr:us-east-1:450559665402:repository/*"
                        }],
                        "Version": "2012-10-17"
                    },
                    "PolicyName": "ECRAccess"
                }],
                "RoleName": "RootRole"
            }
        },
        "ByolSingleEc2StackrootRoleDefaultPolicy85F6C6FB": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [{
                        "Action": ["s3:GetObject*", "s3:GetBucket*", "s3:List*"],
                        "Effect": "Allow",
                        "Resource": [{
                            "Fn::Join": ["", ["arn:", {
                                "Ref": "AWS::Partition"
                            }, ":s3:::", {
                                "Ref": "LicenseKeyBucketName"
                            }]]
                        }, {
                            "Fn::Join": ["", ["arn:", {
                                "Ref": "AWS::Partition"
                            }, ":s3:::", {
                                "Ref": "LicenseKeyBucketName"
                            }, "/", {
                                "Ref": "LicenseKeyBucketPath"
                            }]]
                        }]
                    }, {
                        "Action": ["cloudformation:DescribeStackResource", "cloudformation:SignalResource"],
                        "Effect": "Allow",
                        "Resource": {
                            "Ref": "AWS::StackId"
                        }
                    }],
                    "Version": "2012-10-17"
                },
                "PolicyName": "ByolSingleEc2StackrootRoleDefaultPolicy85F6C6FB",
                "Roles": [{
                    "Ref": "ByolSingleEc2StackrootRoleC290A1F9"
                }]
            }
        },
        "ByolSingleEc2StackgeneralSecurityGroupAD2AC726": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ByolSingleEc2Stack/ByolSingleEc2Stack-generalSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 11250",
                    "FromPort": 11250,
                    "IpProtocol": "tcp",
                    "ToPort": 11250
                }, {
                    "CidrIp": {
                        "Ref": "PublicAccessCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicAccessCIDR on port 11250",
                    "FromPort": 11250,
                    "IpProtocol": "tcp",
                    "ToPort": 11250
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 443",
                    "FromPort": 443,
                    "IpProtocol": "tcp",
                    "ToPort": 443
                }, {
                    "CidrIp": {
                        "Ref": "PublicAccessCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicAccessCIDR on port 443",
                    "FromPort": 443,
                    "IpProtocol": "tcp",
                    "ToPort": 443
                }],
                "VpcId": {
                    "Fn::GetAtt": ["NetworkStackNestedStackNetworkStackNestedStackResource551D4040", "Outputs.ByolSingleEc2StackNetworkStackNetworkStackVpc8D7399B3Ref"]
                }
            }
        },
        "ByolSingleEc2StackmainEC2InstanceProfileC9631FE7": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "ByolSingleEc2StackrootRoleC290A1F9"
                }]
            }
        },
        "ByolSingleEc2StackmainEC2C82E49E9": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [0, {
                        "Fn::GetAZs": ""
                    }]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/xvda",
                    "Ebs": {
                        "VolumeSize": 30
                    }
                }],
                "IamInstanceProfile": {
                    "Ref": "ByolSingleEc2StackmainEC2InstanceProfileC9631FE7"
                },
                "ImageId": {
                    "Fn::FindInMap": ["ByolSingleEc2StackmainEC2AmiMapC1DAE27F", {
                        "Ref": "AWS::Region"
                    }, "ami"]
                },
                "InstanceType": {
                    "Ref": "ServerInstanceType"
                },
                "SecurityGroupIds": [{
                    "Fn::GetAtt": ["ByolSingleEc2StackgeneralSecurityGroupAD2AC726", "GroupId"]
                }],
                "SubnetId": {
                    "Fn::GetAtt": ["NetworkStackNestedStackNetworkStackNestedStackResource551D4040",
                        "Outputs.ByolSingleEc2StackNetworkStackNetworkStackVpcNetworkStacksubnetpublicSubnet1Subnet36419961Ref"
                    ]
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "ByolSingleEc2Stack/ByolSingleEc2Stack-mainEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["#!/bin/bash\nyum install -y aws-cfn-bootstrap\n# fingerprint: 15c65d8d5cdc2207\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource ByolSingleEc2StackmainEC2C82E49E9 -c proxy,resources,install,nifiSetup,importFlow\n  /opt/aws/bin/cfn-signal -e $? --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource ByolSingleEc2StackmainEC2C82E49E9\n  cat /var/log/cfn-init.log >&2\n)"]]
                    }
                }
            },
            "DependsOn": ["ByolSingleEc2StackrootRoleDefaultPolicy85F6C6FB", "ByolSingleEc2StackrootRoleC290A1F9"],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT40M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "nifiSetup": ["configNifiSetup"],
                        "importFlow": ["configImportFlow"],
                        "proxy": ["setupproxy"],
                        "resources": ["resourcefiles"],
                        "install": ["installfiles"]
                    },
                    "configNifiSetup": {
                        "files": {
                            "/opt/mf/nifi/blank_flow.json": {
                                "content": "{\"flowContents\":{\"identifier\":\"7e70960f-62e9-3522-a743-6e043dc12ca6\",\"name\":\"NiFi Flow\",\"comments\":\"\",\"position\":{\"x\":0.0,\"y\":0.0},\"processGroups\":[],\"remoteProcessGroups\":[],\"processors\":[],\"inputPorts\":[],\"outputPorts\":[],\"connections\":[],\"labels\":[],\"funnels\":[],\"controllerServices\":[],\"variables\":{},\"componentType\":\"PROCESS_GROUP\",\"flowFileConcurrency\":\"UNBOUNDED\",\"flowFileOutboundPolicy\":\"STREAM_WHEN_AVAILABLE\"},\"externalControllerServices\":{},\"parameterContexts\":{},\"flowEncodingVersion\":\"1.0\"}",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "nifi",
                                "group": "nifi"
                            },
                            "/opt/mf/nifi/import_flow.sh": {
                                "content": "#!/bin/bash -xe\nFLOWFILE=$1\nIDOL_HOST=$2\nIDOL_LICENSESERVER_HOST=$3\nS3_BUCKET=$4\nS3_ACCESS=$5\nS3_SECRET=$6\nexport JAVA_HOME=/usr/lib/jvm/jre-11\nNIFITOOLKITCMD=/opt/mf/nifi-toolkit/bin/cli.sh\necho Blanking root flow and services\ntimeout 10m bash -c \"until ${NIFITOOLKITCMD} nifi current-user >/dev/null; do sleep 5; done\"\nROOTID=`${NIFITOOLKITCMD} nifi get-root-id`\n${NIFITOOLKITCMD} nifi pg-disable-services -pgid ${ROOTID}\n${NIFITOOLKITCMD} nifi pg-replace -pgid ${ROOTID} -i /opt/mf/nifi/blank_flow.json\necho Importing IDOL NiFi Flow\nBUCKETID=`${NIFITOOLKITCMD} registry create-bucket -u https://localhost:18080 -bn idol-flow`\necho BUCKETID=${BUCKETID}\nFLOWID=`${NIFITOOLKITCMD} registry create-flow -u https://localhost:18080 -b ${BUCKETID} -fn \"IDOL NiFi Flow\"`\necho FLOWID=${FLOWID}\nFLOWVERSION=`${NIFITOOLKITCMD} registry import-flow-version -u https://localhost:18080 -f ${FLOWID} -i /opt/mf/resources/IDOL_NiFi_Flow_v3.json`\necho FLOWVERSION=\\${FLOWVERSION}\ntimeout 5m bash -c \"until ${NIFITOOLKITCMD} nifi pg-import -b ${BUCKETID} -f ${FLOWID} -fv ${FLOWVERSION} > /opt/mf/nifi/process_group.txt; do sleep 5; done\"\nPROCESSGROUP=$(cat /opt/mf/nifi/process_group.txt)\necho PROCESSGROUP=${PROCESSGROUP}\nPARAMCONTEXT=`${NIFITOOLKITCMD} nifi pg-get-param-context -pgid ${PROCESSGROUP}`\necho PARAMCONTEXT=${PARAMCONTEXT}\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"IDOL Host\" -pv \"${IDOL_HOST}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"IDOL LicenseServer Host\" -pv \"${IDOL_LICENSESERVER_HOST}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"IDOL ACI Port\" -pv \"9100\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Bucket\" -pv \"${S3_BUCKET}\"\necho Setting sensitive values...\nset +x\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Access Key\" -pv \"${S3_ACCESS}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Secret Key\" -pv \"${S3_SECRET}\"\nset -x\necho Enabling services and starting processors...\n# Some processors can be slow to start up, so be forgiving\nset +e\n${NIFITOOLKITCMD} nifi pg-enable-services -pgid ${PROCESSGROUP} -verbose\nsleep 30\n${NIFITOOLKITCMD} nifi pg-start -pgid ${PROCESSGROUP} -verbose",
                                "encoding": "plain",
                                "mode": "000744",
                                "owner": "nifi",
                                "group": "nifi"
                            },
                            "/opt/mf/nifi/enable_extensions.sh": {
                                "content": "#!/bin/bash -xe\nexport JAVA_HOME=/usr/lib/jvm/jre-11\nNIFITOOLKITCMD=/opt/mf/nifi-toolkit/bin/cli.sh\ntimeout 5m bash -c \"until ${NIFITOOLKITCMD} registry current-user >/dev/null; do sleep 5; done\"\ntimeout 10m bash -c \"until ${NIFITOOLKITCMD} nifi current-user >/dev/null; do sleep 5; done\"\n${NIFITOOLKITCMD} registry download-bundle -bn optional-nars --group idol.nifi.connector -ar idol-nifi-connector-router-nar -ver 12.11.0-SNAPSHOT -od /opt/mf/nifi/extensions\n${NIFITOOLKITCMD} registry download-bundle -bn optional-nars --group idol.nifi.connector -ar idol-nifi-connector-amazons3 -ver 12.11.0-SNAPSHOT -od /opt/mf/nifi/extensions",
                                "encoding": "plain",
                                "mode": "000744",
                                "owner": "nifi",
                                "group": "nifi"
                            }
                        }
                    },
                    "configImportFlow": {
                        "commands": {
                            "000": {
                                "command": "sudo -u nifi /opt/mf/nifi/enable_extensions.sh",
                                "ignoreErrors": true
                            },
                            "001": {
                                "command": {
                                    "Fn::Join": ["", ["sudo -u nifi /opt/mf/nifi/import_flow.sh /opt/mf/resources/IDOL_NiFi_Flow_v3.json localhost localhost \"", {
                                        "Ref": "NiFiS3Bucket"
                                    }, "\" \"", {
                                        "Ref": "NiFiS3AccessKey"
                                    }, "\" \"", {
                                        "Ref": "NiFiS3SecretKey"
                                    }, "\""]]
                                },
                                "ignoreErrors": true
                            }
                        }
                    },
                    "setupproxy": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "mod_ssl": []
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.ByolSingleEc2StackmainEC2C82E49E9.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource ByolSingleEc2StackmainEC2C82E49E9 --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/httpd/conf.d/idol.conf": {
                                "content": "Listen 10000 http\nListen 11250 https\n\nProxyRequests Off\nProxyPreserveHost On\n\nSSLCertificateFile /etc/tls/gateway-cert.pem\nSSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA\nSSLEngine on\nSSLProxyEngine on\nSSLProtocol all -SSLv3\nSSLProxyCheckPeerCN off\nSSLProxyCheckPeerExpire off\nSSLCryptoDevice builtin\nSSLRandomSeed startup builtin\nSSLRandomSeed connect builtin\n\nErrorLog logs/ssl_error_log\nTransferLog logs/ssl_access_log\nLogLevel warn\n\n<VirtualHost _default_:11250>\n<Location /content/>\nProxyPass http://localhost:9100/\nProxyPassReverse /\n</Location>\n\n<Location /find/>\nProxyPass http://localhost:8000/\nProxyPassReverse /\n</Location>\n\n<Location /siteadmin/>\nProxyPass http://localhost:8090/\nProxyPassReverse /\n</Location>\n</VirtualHost>",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "mkdir -p /etc/tls"
                            },
                            "001": {
                                "command": "GATEWAY_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
                            },
                            "002": {
                                "command": {
                                    "Fn::Join": ["", ["openssl req -x509 -sha256 -nodes -days 90 -newkey rsa:4096 -keyout /etc/tls/gateway.key -out /etc/tls/gateway-cert.pem -subj \"/C=", {
                                        "Ref": "Country"
                                    }, "/ST=", {
                                        "Ref": "StateProvinceCounty"
                                    }, "/L=", {
                                        "Ref": "Locality"
                                    }, "/O=", {
                                        "Ref": "Organisation"
                                    }, "/OU=", {
                                        "Ref": "OrganisationalUnit"
                                    }, "/CN=$GATEWAY_IP/emailAddress=", {
                                        "Ref": "EmailAddress"
                                    }, "\""]]
                                }
                            },
                            "003": {
                                "command": "cat /etc/tls/gateway.key | tee -a /etc/tls/gateway-cert.pem"
                            },
                            "004": {
                                "command": "rm /etc/tls/gateway.key"
                            },
                            "005": {
                                "command": "sed -i 's/\\(^[^#].*$\\)/#\\1/' /etc/httpd/conf.d/welcome.conf"
                            },
                            "006": {
                                "command": "sudo sed -i 's/Listen 80/#Listen 80/' /etc/httpd/conf/httpd.conf"
                            },
                            "007": {
                                "command": "rm /etc/httpd/conf.d/ssl.conf"
                            },
                            "008": {
                                "command": "rm /etc/httpd/conf.d/autoindex.conf"
                            },
                            "009": {
                                "command": "rm /etc/httpd/conf.d/userdir.conf"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "resourcefiles": {
                        "files": {
                            "/opt/idol-docker/licensekey.dat": {
                                "source": {
                                    "Fn::Join": ["", ["https://s3.", {
                                        "Ref": "LicenseKeyBucketRegion"
                                    }, ".", {
                                        "Ref": "AWS::URLSuffix"
                                    }, "/", {
                                        "Ref": "LicenseKeyBucketName"
                                    }, "/", {
                                        "Ref": "LicenseKeyBucketPath"
                                    }]]
                                },
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        }
                    },
                    "installfiles": {
                        "files": {
                            "/opt/idol-docker/.env": {
                                "content": "# Registry to obtain images from\nIDOL_REGISTRY=450559665402.dkr.ecr.us-east-1.amazonaws.com\n# Version of IDOL images to use\nIDOL_SERVER_VERSION=12.11\n# Site Admin not published with every release...\nIDOL_SITEADMIN_VERSION=12.10\n# Generated image registry tag\nIMAGE_BUILD_REGISTRY=idol-aws\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/Dockerfile.single_component_bundle": {
                                "content": "ARG IDOL_USER=idoluser\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nARG COMPONENT\nFROM ${IDOL_REGISTRY}/idol-${COMPONENT}:${IDOL_VERSION} as component-base\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nFROM ${IDOL_REGISTRY}/idol-controller:${IDOL_VERSION} as controller\n\nARG COMPONENT\nARG IDOL_USER\n\n# Copy executables and configs to controller image\nCOPY --from=component-base --chown=${IDOL_USER}:${IDOL_USER} /${COMPONENT}/ /${COMPONENT}/\n\n# Add control script template which can accept start and stop as arguments,\n# post startup tasks for controller to send requests adding the services bundled within its container\nCOPY --chown=${IDOL_USER}:${IDOL_USER} control_scripts/control-template.sh control_scripts/add_services.sh /controller/\n\n# Finalize controller startup\n# Setup control script, update logs for component\nRUN sed -i \"s#^source ./startup_utils.sh#source ./startup_utils.sh\\nsource ./add_services.sh#\" /controller/startup_tasks.sh && \\\n    sed -i \"s#^function pre_startup_tasks {#function pre_startup_tasks {\\n\\\n        set_controller_uuid \\${CONTROLLER_UUID}#\" /controller/startup_tasks.sh && \\\n    sed -i \"s#^function post_startup_tasks {#function post_startup_tasks {\\n\\\n        add_to_coordinator \\${CONTROLLER_HOST:-\\$(hostname)} \\${COORDINATOR_HOST:-idol-coordinator}\\n\\\n        add_service_to_controller ${COMPONENT}\\n\\\n        controller_start_service ${COMPONENT}#\" /controller/startup_tasks.sh ; \\\n    sed \"s#<COMPONENT>#${COMPONENT}#g\" /controller/control-template.sh  > /${COMPONENT}/control-${COMPONENT}.sh && \\\n    chmod +x /${COMPONENT}/control-${COMPONENT}.sh ; \\\n    sed -i \"s#^\\(LogDirectory *= *\\).*#\\1/idol-logs/${COMPONENT}/#\" /${COMPONENT}/cfg/${COMPONENT}.cfg ; \\\n    sed -i \"s#^\\(LogArchiveDirectory *= *\\).*#\\1/idol-logs/${COMPONENT}/archive#\" /${COMPONENT}/cfg/${COMPONENT}.cfg ;",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/control_scripts/add_services.sh": {
                                "content": "#!/bin/bash\n\nsource /controller/startup_utils.sh\n\n## Command to call with an HTTP request\nMAKE_REQUEST=\"wget -qO-\"\n\n## Explicitly set controller UUID\nfunction set_controller_uuid {\n    controller_uuid=$1\n    controller_uuid_dat=${2:-/controller/ssdp/uuid.dat}\n\n    if [ ! -z \"${controller_uuid}\" ] && [ ! -f \"${controller_uuid_dat}\" ]\n    then\n        mkdir -p \"${controller_uuid_dat%/*}\"\n        echo -n \"${controller_uuid}\" > \"${controller_uuid_dat}\"\n    fi\n}\n\n## Add service to local controller\nfunction add_service_to_controller {\n    component_name=$1\n    controller_host=${2:-localhost}\n    controller_port=${3:-41200}\n\n    # Wait for controller to be available\n    waitForAci \"${controller_host}:${controller_port}\"\n    # Add service\n    ${MAKE_REQUEST} \"http://${controller_host}:${controller_port}/a=addservice&name=idol-${component_name}&execpath=/${component_name}/${component_name}.exe&configpath=/${component_name}/cfg/${component_name}.cfg&controlmethod=script&initscriptpath=/${component_name}/control-${component_name}.sh\"\n}\n\n## Request controller start a service\nfunction controller_start_service {\n    component_name=$1\n    controller_host=${2:-localhost}\n    controller_port=${3:-41200}\n\n    # Wait for controller to be available\n    waitForAci \"${controller_host}:${controller_port}\"\n    # Controller can't target control actions by name, need to look up port number\n    component_port=$(${MAKE_REQUEST} \"http://localhost:41200/a=getservices&names=idol-${component_name}\" | grep -o -P 'port=\"[0-9]+' | grep -o -P '[0-9]+')\n    # Ask controller to start service\n    ${MAKE_REQUEST} \"http://${controller_host}:${controller_port}/a=startservice&port=${component_port}\"\n    # Wait for service to be ready\n    waitForAci \"localhost:${component_port}\"\n}\n\n## Add controller to coordinator\nfunction add_to_coordinator {\n    controller_hostname=$1\n    coordinator_host=${2:-idol-coordinator}\n    controller_port=${3:-41200}\n    coordinator_port=${4:-40200}\n\n    # Wait for controller to be available, so controller can call back\n    waitForAci \"${controller_hostname}:${controller_port}\"\n    # Once coordinator is ready, add this controller to it\n    waitForAci \"${coordinator_host}:${coordinator_port}\"\n    ${MAKE_REQUEST} \"http://${coordinator_host}:${coordinator_port}/a=addcontroller&HostName=${controller_hostname}&Port=${controller_port}&ConnectByHostName=True\"\n}\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/control_scripts/add_useradmin.sh": {
                                "content": "#!/bin/bash\n\nfunction bootstrapFindSiteAdminUsers() {\n    local ADMIN_USERNAME=${1:-admin}\n    local ADMIN_PASSWORD_FILE=${2:-/community/passwords/${ADMIN_USERNAME}_password.txt}\n    local ADMIN_PASSWORD=$(openssl rand -hex 16)\n    local COMMUNITY_HOST=${3:-idol-community}\n    local COMMUNITY_PORT=${4:-9030}\n    local HTTP_SCHEME=http\n  \n    if [ -e adduser.admin.xml ]\n    then\n        echo \"Community already bootstrapped.\"\n    else\n        echo \"Bootstrapping community...\"\n        wget -qO adduser.admin.xml --no-proxy \"${HTTP_SCHEME}://${COMMUNITY_HOST}:${COMMUNITY_PORT}/a=UserAdd&userName=${ADMIN_USERNAME}&password=${ADMIN_PASSWORD}\" --no-check-certificate\n        for role in FindUser FindAdmin FindBI useradmin\n        do\n            wget -qO \"addrole.${role}.xml\" --no-proxy \"${HTTP_SCHEME}://${COMMUNITY_HOST}:${COMMUNITY_PORT}/a=RoleAdd&roleName=${role}\" --no-check-certificate\n            wget -qO \"addrole.${role}.admin.xml\" --no-proxy \"$HTTP_SCHEME://${COMMUNITY_HOST}:$COMMUNITY_PORT/a=RoleAddUserToRole&RoleName=${role}&userName=${ADMIN_USERNAME}\" --no-check-certificate\n        done\n        mkdir -p \"${ADMIN_PASSWORD_FILE%/*}\"\n        echo -n \"${ADMIN_PASSWORD}\" > ${ADMIN_PASSWORD_FILE}\n        echo \"Community bootstrap completed.\"\n    fi\n  }\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/control_scripts/control-template.sh": {
                                "content": "#!/bin/bash\n\n# Get to correct directory to run <COMPONENT>.\npushd /<COMPONENT> > /dev/null 2>&1\n\n# Include startup tasks and utils\nsource /<COMPONENT>/startup_tasks.sh\n\nif [ $1 == 'start' ]\nthen\n    pre_startup_tasks\n\n    echo \"--------------------------------------------------------------------\"\n    echo \"Micro Focus <COMPONENT> Server\"\n    echo \"(c) 1999-2021 Micro Focus\"\n    echo \"--------------------------------------------------------------------\"\n    echo \"Starting <COMPONENT> Server...\"\n\n    /<COMPONENT>/<COMPONENT>.exe -configfile /<COMPONENT>/cfg/<COMPONENT>.cfg &\n    serverpid=$!\n    echo \"Started <COMPONENT> Server with PID $serverpid\"\n\n    post_startup_tasks\nfi\n\nif [ $1 == 'stop' ]\nthen\n    echo \"Stopping <COMPONENT> Server...\"\n    if [ -f <COMPONENT>.pid ]\n    then\n        kill -15 \\`cat <COMPONENT>.pid\\`\n        echo \"Stopped <COMPONENT> Server\"\n        else\n        echo \"Could not locate <COMPONENT>.pid - unable to stop <COMPONENT> Server\"\n    fi \nfi\n\nexit\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/control_scripts/ui_start_wait.sh": {
                                "content": "#! /usr/bin/env bash\n\nsource ./startup_utils.sh\n\nfunction do_pre_start_tasks {\n    waitForAci \"idol-community:9030\"\n}\n\nfunction do_start {\n    default_start\n}\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/Dockerfile.static_servers_bundle": {
                                "content": "ARG IDOL_USER=idoluser\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nFROM ${IDOL_REGISTRY}/idol-agentstore:${IDOL_VERSION} as agentstore-base\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nFROM ${IDOL_REGISTRY}/idol-community:${IDOL_VERSION} as community-base\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nFROM ${IDOL_REGISTRY}/idol-view:${IDOL_VERSION} as view-base\n\nARG IDOL_REGISTRY\nARG IDOL_VERSION\nFROM ${IDOL_REGISTRY}/idol-controller:${IDOL_VERSION} as controller\n\nARG IDOL_USER\n\n# Copy executables and configs to controller image\nCOPY --from=agentstore-base --chown=${IDOL_USER}:${IDOL_USER} /agentstore/ /agentstore/\nCOPY --from=community-base --chown=${IDOL_USER}:${IDOL_USER} /community/ /community/\nCOPY --from=view-base --chown=${IDOL_USER}:${IDOL_USER} /view/ /view/\n\n# Add control script template which can accept start and stop as arguments,\n# post startup tasks for controller to send requests adding the services bundled within its container\nCOPY --chown=${IDOL_USER}:${IDOL_USER} control_scripts/control-template.sh control_scripts/add_services.sh /controller/\n\n# Add modified admin user setup script to community working dir\nCOPY --chown=${IDOL_USER}:${IDOL_USER} control_scripts/add_useradmin.sh /community/\n\n# Finalize controller startup\n# Setup control script, update logs for each component\n# Special modification of post-startup for community to customize bootstrap-user parameters\nRUN sed -i \"s#^source ./startup_utils.sh#source ./startup_utils.sh\\nsource ./add_services.sh#\" /controller/startup_tasks.sh && \\\n    sed -i \"s#^function pre_startup_tasks {#function pre_startup_tasks {\\n\\\n        set_controller_uuid \\${CONTROLLER_UUID}#\" /controller/startup_tasks.sh ; \\\n    for COMPONENT in view community agentstore; do \\\n    sed -i \"s#^function post_startup_tasks {#function post_startup_tasks {\\n\\\n        add_service_to_controller ${COMPONENT}\\n\\\n        controller_start_service ${COMPONENT}#\" /controller/startup_tasks.sh ; \\\n    sed \"s#<COMPONENT>#${COMPONENT}#g\" /controller/control-template.sh  > /${COMPONENT}/control-${COMPONENT}.sh && \\\n    chmod +x /${COMPONENT}/control-${COMPONENT}.sh ; \\\n    sed -i \"s#^\\(LogDirectory *= *\\).*#\\1/idol-logs/${COMPONENT}/#\" /${COMPONENT}/cfg/${COMPONENT}.cfg ; \\\n    sed -i \"s#^\\(LogArchiveDirectory *= *\\).*#\\1/idol-logs/${COMPONENT}/archive#\" /${COMPONENT}/cfg/${COMPONENT}.cfg ; \\\n    done ; \\\n    sed -i \"s#^source ./startup_utils.sh#source ./startup_utils.sh\\nsource ./add_useradmin.sh#\" /community/startup_tasks.sh && \\\n    sed -i \"s#^\\(\\s*bootstrap\\)Users#\\1FindSiteAdminUsers#\" /community/startup_tasks.sh ; \\\n    sed -i \"s#^function post_startup_tasks {#function post_startup_tasks {\\n\\\n        add_to_coordinator \\${CONTROLLER_HOST:-\\$(hostname)} \\${COORDINATOR_HOST:-idol-coordinator}#\" /controller/startup_tasks.sh ;\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/config_files/siteadmin/config.json": {
                                "content": "{\n    \"alerts\" : {\n      \"historySecs\" : 1209600.0\n    },\n    \"documentTracking\" : {\n      \"enabled\" : false,\n      \"datasource\" : {\n        \"platform\" : \"postgres\",\n        \"hibernateDialect\" : \"org.hibernate.dialect.PostgreSQL82Dialect\",\n        \"driverClassName\" : \"org.postgresql.Driver\",\n        \"url\" : \"jdbc:postgresql://:/\",\n        \"username\" : \"\",\n        \"password\" : \"\",\n        \"passwordRedacted\" : false\n      }\n    },\n    \"hostDiscovery\" : {\n      \"port\" : 41200\n    },\n    \"locale\" : \"en_US\",\n    \"login\" : {\n      \"name\" : \"CommunityAuthentication\",\n      \"defaultLogin\" : {\n        \"username\" : null,\n        \"password\" : null\n      },\n      \"community\" : {\n        \"protocol\" : \"HTTP\",\n        \"host\" : \"idol-community\",\n        \"port\" : 9030,\n        \"indexProtocol\" : \"HTTP\",\n        \"indexPort\" : null,\n        \"serviceProtocol\" : \"HTTP\",\n        \"servicePort\" : 9032,\n        \"productType\" : [ \"UASERVER\" ],\n        \"indexErrorMessage\" : null,\n        \"productTypeRegex\" : null\n      },\n      \"method\" : \"autonomy\"\n    },\n    \"logging\" : {\n      \"syslog\" : {\n        \"enabled\" : false,\n        \"host\" : \"\",\n        \"port\" : 514\n      },\n      \"logFile\" : {\n        \"enabled\" : true,\n        \"compression\" : \"NONE\",\n        \"maxHistory\" : 30,\n        \"rolloverFrequency\" : \"DAILY\",\n        \"maxSize\" : 104857600\n      }\n    },\n    \"mail\" : {\n      \"enabled\" : false,\n      \"host\" : \"\",\n      \"port\" : 25,\n      \"username\" : \"\",\n      \"password\" : \"\",\n      \"passwordRedacted\" : false,\n      \"properties\" : { },\n      \"from\" : \"\",\n      \"to\" : [ ],\n      \"connectionSecurity\" : \"NONE\"\n    },\n    \"datasource\" : {\n      \"platform\" : \"h2\",\n      \"hibernateDialect\" : \"org.hibernate.dialect.H2Dialect\",\n      \"driverClassName\" : \"org.h2.Driver\",\n      \"url\" : \"jdbc:h2:file:/opt/siteadmin/home/data/site-admin-db;DB_CLOSE_ON_EXIT=FALSE\",\n      \"username\" : \"sa\",\n      \"password\" : \"\",\n      \"passwordRedacted\" : false\n    },\n    \"coordinator\" : {\n      \"protocol\" : \"HTTP\",\n      \"host\" : \"idol-coordinator\",\n      \"port\" : 40200,\n      \"indexProtocol\" : \"HTTP\",\n      \"indexPort\" : 40201,\n      \"serviceProtocol\" : \"HTTP\",\n      \"servicePort\" : 40202,\n      \"productType\" : [ \"SERVICECOORDINATOR\" ],\n      \"indexErrorMessage\" : \"BADLY FORMATTED REQUEST\",\n      \"productTypeRegex\" : null\n    },\n    \"serviceDiscovery\" : {\n      \"paths\" : [ \"/opt/Autonomy\" ]\n    },\n    \"tasks\" : {\n      \"dashboardHistorySecs\" : 3600.0,\n      \"footerHistorySecs\" : 300.0,\n      \"historySecs\" : 1209600.0\n    },\n    \"encryptionCodec\" : null\n  }\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/opt/idol-docker/docker-compose.yml": {
                                "content": "version: \"3.7\"\n\nx-external-nifi-host: &external-nifi-host\n  - idol-nifi:host-gateway\n\nservices:\n  idol-licenseserver:\n    image: ${IDOL_REGISTRY}/idol-licenseserver:${IDOL_SERVER_VERSION}\n    extra_hosts: *external-nifi-host\n    volumes:\n      - ./licensekey.dat:/licenseserver/licensekey.dat\n    ports:\n      - 127.0.0.1:20000:20000\n  idol-coordinator:\n    image: ${IDOL_REGISTRY}/idol-coordinator:${IDOL_SERVER_VERSION}\n    extra_hosts: *external-nifi-host\n    depends_on:\n      - idol-licenseserver\n  idol-content:\n    image: ${IMAGE_BUILD_REGISTRY}/content:${IDOL_SERVER_VERSION}-controller\n    extra_hosts: *external-nifi-host\n    build: \n      context: ./\n      dockerfile: Dockerfile.single_component_bundle\n      args:\n        IDOL_REGISTRY: ${IDOL_REGISTRY}\n        IDOL_VERSION: ${IDOL_SERVER_VERSION}\n        COMPONENT: content\n    ports:\n      - 127.0.0.1:9100-9102:9100-9102\n    depends_on:\n      - idol-licenseserver\n      - idol-coordinator\n    environment:\n      - CONTROLLER_HOST=idol-content-controller\n      - CONTROLLER_UUID=186644a5-4627-47d2-b311-7a46679e1dde\n    networks:\n      default:\n        aliases:\n          - idol-content-controller\n  idol-static-servers:\n    image: ${IMAGE_BUILD_REGISTRY}/static-servers:${IDOL_SERVER_VERSION}-controller\n    extra_hosts: *external-nifi-host\n    build:\n      context: ./\n      dockerfile: Dockerfile.static_servers_bundle\n      args:\n        IDOL_REGISTRY: ${IDOL_REGISTRY}\n        IDOL_VERSION: ${IDOL_SERVER_VERSION}\n    depends_on:\n      - idol-licenseserver\n      - idol-content\n      - idol-coordinator\n    environment:\n      - CONTROLLER_HOST=idol-static-servers-controller\n      - CONTROLLER_UUID=c15e6e6a-eed1-4b79-ac7d-f02447298935\n    networks:\n      default:\n        aliases:\n          - idol-static-servers-controller\n          - idol-agentstore\n          - idol-community\n          - idol-view\n    volumes:\n      - ./passwords/:/community/passwords/:rw\n  idol-find:\n    image: ${IDOL_REGISTRY}/idol-find:${IDOL_SERVER_VERSION}\n    depends_on:\n      - idol-static-servers\n    environment:\n      - IDOL_UI_CFG=config_basic.json\n      - IDOL_UI_STARTUP_SCRIPT=ui_start.sh\n    ports:\n      - \"127.0.0.1:8000:8000\"\n    volumes:\n      - ./control_scripts/ui_start_wait.sh:/opt/find/ui_start.sh:rw\n  idol-siteadmin:\n    image: ${IDOL_REGISTRY}/idol-siteadmin:${IDOL_SITEADMIN_VERSION}\n    depends_on:\n      - idol-static-servers\n      - idol-coordinator\n    environment:\n      - IDOL_UI_STARTUP_SCRIPT=ui_start.sh\n    ports:\n      - \"127.0.0.1:8090:8000\"\n    volumes:\n      - ./config_files/siteadmin/config.json:/opt/siteadmin/home/config.json\n      - ./control_scripts/ui_start_wait.sh:/opt/siteadmin/ui_start.sh:ro\n\n",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": {
                                    "Fn::Join": ["", ["aws ecr get-login-password --region ", {
                                        "Ref": "AWS::Region"
                                    }, " | sudo docker login --username AWS --password-stdin 450559665402.dkr.ecr.us-east-1.amazonaws.com"]]
                                }
                            },
                            "001": {
                                "command": "mkdir -m a=rwx /opt/idol-docker/passwords"
                            },
                            "002": {
                                "command": "docker-compose up -d",
                                "cwd": "/opt/idol-docker"
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "ByolSingleEc2StackrootRoleC290A1F9"
                        },
                        "buckets": [{
                            "Ref": "LicenseKeyBucketName"
                        }]
                    }
                }
            }
        }
    },
    "Mappings": {
        "ByolSingleEc2StackmainEC2AmiMapC1DAE27F": {
            "us-east-1": {
                "ami": "ami-025f8d81cabd869c2"
            }
        }
    },
    "Outputs": {
        "ContentACIEndpoint": {
            "Description": "ACI port of Content",
            "Value": {
                "Fn::Join": ["", ["https://", {
                    "Fn::GetAtt": ["ByolSingleEc2StackmainEC2C82E49E9", "PublicIp"]
                }, ":11250/content/"]]
            },
            "Export": {
                "Name": "ContentACIEndpoint"
            }
        },
        "Find": {
            "Description": "Find endpoint",
            "Value": {
                "Fn::Join": ["", ["https://", {
                    "Fn::GetAtt": ["ByolSingleEc2StackmainEC2C82E49E9", "PublicIp"]
                }, ":11250/find/"]]
            },
            "Export": {
                "Name": "FindEndpoint"
            }
        },
        "SiteAdmin": {
            "Description": "SiteAdmin endpoint",
            "Value": {
                "Fn::Join": ["", ["https://", {
                    "Fn::GetAtt": ["ByolSingleEc2StackmainEC2C82E49E9", "PublicIp"]
                }, ":11250/siteadmin/"]]
            },
            "Export": {
                "Name": "SiteAdminEndpoint"
            }
        },
        "InitialPassword": {
            "Description": "Initial password for Find and SiteAdmin",
            "Value": "Initial admin password can be found on the EC2 instance in /opt/idol-docker/passwords/admin_password.txt",
            "Export": {
                "Name": "InitialPassword"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                "Label": {
                    "default": "InstanceType Configuration"
                },
                "Parameters": ["ServerInstanceType"]
            }, {
                "Label": {
                    "default": "License Configuration"
                },
                "Parameters": ["LicenseKeyBucketName", "LicenseKeyBucketPath", "LicenseKeyBucketRegion"]
            }, {
                "Label": {
                    "default": "Self-Signed Certificate Configuration"
                },
                "Parameters": ["Country", "StateProvinceCounty", "Locality", "Organisation", "OrganisationalUnit", "EmailAddress"]
            }, {
                "Label": {
                    "default": "NiFi ingest configuration"
                },
                "Parameters": ["NiFiS3Bucket", "NiFiS3AccessKey", "NiFiS3SecretKey"]
            }]
        }
    }
}
