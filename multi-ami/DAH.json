{
    "Resources": {
        "DAHdahSecurityGroupCE6207F9": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/DAH/DAH-dahSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9060",
                    "FromPort": 9060,
                    "IpProtocol": "tcp",
                    "ToPort": 9060
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9062",
                    "FromPort": 9062,
                    "IpProtocol": "tcp",
                    "ToPort": 9062
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "DAHdahEC2InstanceProfile1AB565F4": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref"
                }]
            }
        },
        "DAHdahEC2A7CA3815": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [0, {
                        "Fn::GetAZs": ""
                    }]
                },
                "IamInstanceProfile": {
                    "Ref": "DAHdahEC2InstanceProfile1AB565F4"
                },
                "ImageId": {
                    "Fn::FindInMap": ["DAHdahEC2AmiMapCC497239", {
                        "Ref": "AWS::Region"
                    }, "ami"]
                },
                "InstanceType": {
                    "Ref": "referencetotestCdkBasicIdolStackDAHInstanceTypeD6638F9ERef"
                },
                "SecurityGroupIds": [{
                    "Fn::GetAtt": ["DAHdahSecurityGroupCE6207F9", "GroupId"]
                }, {
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId"
                }],
                "SubnetId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "test-CdkBasicIdolStack/DAH/DAH-dahEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["#!/bin/bash\nyum install -y aws-cfn-bootstrap\n# fingerprint: f82e421316e2d68f\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource DAHdahEC2A7CA3815 -c dahcfg,install,addServicesToController\n  /opt/aws/bin/cfn-signal -e $? --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource DAHdahEC2A7CA3815\n  cat /var/log/cfn-init.log >&2\n)"]]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "dahcfg": ["dahfiles"],
                        "install": ["installfiles"],
                        "addServicesToController": ["configAddServicesToController"]
                    },
                    "dahfiles": {
                        "files": {
                            "/opt/dah/dah.cfg": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[Service]\nServicePort=9062\nAccess-Control-Allow-Origin=http://localhost:9060\nXSLTemplates=TRUE\n\n[Server]\nPort=9060\n\nThreads=4\nMaxInputString=64000\nXSLTemplates=TRUE\nLogRequestTiming=TRUE\n\nAbridgedGetContentBatchSize=1000\nAbridgedThreshold=1000\nEngineMaxRetries=2\nEngineTimeout=60\nMirrorMode=FALSE\nSuggestTerms=40\n\n//Load Balancing\nDistributionMethod=1\n//Round Robin\nLoadBalanceMethod=1\n\nTimeBetweenRetries=60000\nSimpleCombinatorMode=true\n\nDistributedEngines=", {
                                            "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                                        },
                                        "\n\n[AuthorizationRoles]\n0=AdminRole\n1=QueryRole\n\n[AdminRole]\nStandardRoles=admin,servicecontrol,query,servicestatus\nClients=*\n\n[QueryRole]\nStandardRoles=query,servicestatus\nClients=*\n\n[Logging]\nLogArchiveDirectory=./logs/archive\nLogDirectory=./logs\n// These values apply to all streams, override on an individual basis\nLogLevel=normal\nLogExpireAction=compress\nLogOldAction=move\nLogMaxSizeKBs=20480\nLogTime=TRUE\n\n0=ApplicationLogStream\n1=ActionLogStream\n2=SecurityLogStream\n\n[ApplicationLogStream]\nLogFile=application.log\nLogTypeCSVs=application\n\n[ActionLogStream]\nLogFile=action.log\nLogTypeCSVs=action\n\n[SecurityLogStream]\nLogFile=security.log\nLogTypeCSVs=security\n"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "idol",
                                "group": "idol"
                            },
                            "/opt/setup/edit_hosts_file.sh": {
                                "content": {
                                    "Fn::Join": ["", ["#!/bin/bash -xe\n\nfunction applyContentHostNames() {\n  CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print ' '.join(json.load(sys.stdin).values())\")\n  CONTENT_COUNT=0\n  for ip in $CONTENT_IPS\n  do\n      echo \"$ip    content-instance-$CONTENT_COUNT\" >> /etc/hosts\n      CONTENT_COUNT=$((CONTENT_COUNT+1))\n  done\n}\n\necho \"127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance\" > /etc/hosts\necho \"::1          localhost6 localhost6.localdomain6\" >> /etc/hosts\napplyContentHostNames"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "/opt/setup/edit_hosts_file.sh"
                            }
                        }
                    },
                    "installfiles": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.DAHdahEC2A7CA3815.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource DAHdahEC2A7CA3815 --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/dah/add_content_engines.sh": {
                                "content": {
                                    "Fn::Join": ["", ["#!/bin/bash -xe\n\nfunction addContentEngines() {\n  #Parse Content IP addresses and add them to the DAH config file\n  CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print ' '.join(json.load(sys.stdin).values())\")\n  IP_COUNTER=0\n  for ip in $CONTENT_IPS\n  do\n      echo -e \"\n\n[DistributedEngine$IP_COUNTER]\nhost=content-instance-$IP_COUNTER\nport=9100\" >> /opt/dah/dah.cfg\n      IP_COUNTER=$(($IP_COUNTER+1))\n  done\n}\n\naddContentEngines"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "/opt/dah/add_content_engines.sh"
                            },
                            "001": {
                                "command": {
                                    "Fn::Join": ["", ["sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=", {
                                        "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                    }, "/\" /opt/controller/idol.common.cfg"]]
                                }
                            },
                            "002": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "controller": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "dah": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "configAddServicesToController": {
                        "commands": {
                            "000": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/dah/dah.exe&type=dah&name=dah&InitScriptPath=/etc/init.d/dah\""
                            }
                        }
                    }
                }
            }
        }
    },
    "Mappings": {
        "DAHdahEC2AmiMapCC497239": {
            "us-east-1": {
                "ami": "ami-0260d0dc29629e0f5"
            }
        }
    },
    "Parameters": {
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackDAHInstanceTypeD6638F9ERef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp": {
            "Type": "String"
        },
        "PrivateSubnetCIDR": {
            "Type": "String"
        }
    },
    "Outputs": {
        "testCdkBasicIdolStackDAHDAHdahEC284F800B5PrivateIp": {
            "Value": {
                "Fn::GetAtt": ["DAHdahEC2A7CA3815", "PrivateIp"]
            }
        }
    }
}
