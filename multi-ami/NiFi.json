{
    "Resources": {
        "NiFinifiSG16B734F2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/NiFi/NiFi-nifiSG",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 443",
                    "FromPort": 443,
                    "IpProtocol": "tcp",
                    "ToPort": 443
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 10000",
                    "FromPort": 10000,
                    "IpProtocol": "tcp",
                    "ToPort": 10000
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "NiFinifiEC2InstanceProfileD161266D": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref"
                }]
            }
        },
        "NiFinifiEC205F5AE68": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [0, {
                        "Fn::GetAZs": ""
                    }]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/xvda",
                    "Ebs": {
                        "VolumeSize": 30
                    }
                }],
                "IamInstanceProfile": {
                    "Ref": "NiFinifiEC2InstanceProfileD161266D"
                },
                "ImageId": {
                    "Fn::FindInMap": ["NiFinifiEC2AmiMapB294FCFF", {
                        "Ref": "AWS::Region"
                    }, "ami"]
                },
                "InstanceType": {
                    "Ref": "referencetotestCdkBasicIdolStackNiFiInstanceType8EAB74CCRef"
                },
                "SecurityGroupIds": [{
                    "Fn::GetAtt": ["NiFinifiSG16B734F2", "GroupId"]
                }],
                "SubnetId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetpublicSubnet1SubnetB0946841Ref"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "test-CdkBasicIdolStack/NiFi/NiFi-nifiEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["#!/bin/bash\nyum install -y aws-cfn-bootstrap\n# fingerprint: 438b1dcccb7f6fed\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource NiFinifiEC205F5AE68 -c instanceSetup,importFlow\n  /opt/aws/bin/cfn-signal -e $? --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource NiFinifiEC205F5AE68\n  cat /var/log/cfn-init.log >&2\n)"]]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "instanceSetup": ["configInstanceSetup"],
                        "importFlow": ["configImportFlow"]
                    },
                    "configInstanceSetup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.NiFinifiEC205F5AE68.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource NiFinifiEC205F5AE68 --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/mf/nifi/blank_flow.json": {
                                "content": "{\"flowContents\":{\"identifier\":\"7e70960f-62e9-3522-a743-6e043dc12ca6\",\"name\":\"NiFi Flow\",\"comments\":\"\",\"position\":{\"x\":0.0,\"y\":0.0},\"processGroups\":[],\"remoteProcessGroups\":[],\"processors\":[],\"inputPorts\":[],\"outputPorts\":[],\"connections\":[],\"labels\":[],\"funnels\":[],\"controllerServices\":[],\"variables\":{},\"componentType\":\"PROCESS_GROUP\",\"flowFileConcurrency\":\"UNBOUNDED\",\"flowFileOutboundPolicy\":\"STREAM_WHEN_AVAILABLE\"},\"externalControllerServices\":{},\"parameterContexts\":{},\"flowEncodingVersion\":\"1.0\"}",
                                "encoding": "plain",
                                "mode": "000644",
                                "owner": "nifi",
                                "group": "nifi"
                            },
                            "/opt/mf/nifi/import_flow.sh": {
                                "content": "#!/bin/bash -xe\nFLOWFILE=$1\nIDOL_HOST=$2\nIDOL_LICENSESERVER_HOST=$3\nS3_BUCKET=$4\nS3_ACCESS=$5\nS3_SECRET=$6\nexport JAVA_HOME=/usr/lib/jvm/jre-11\nNIFITOOLKITCMD=/opt/mf/nifi-toolkit/bin/cli.sh\necho Blanking root flow and services\nROOTID=`${NIFITOOLKITCMD} nifi get-root-id`\n${NIFITOOLKITCMD} nifi pg-disable-services -pgid ${ROOTID}\n${NIFITOOLKITCMD} nifi pg-replace -pgid ${ROOTID} -i /opt/mf/nifi/blank_flow.json\necho Importing IDOL NiFi Flow\nBUCKETID=`${NIFITOOLKITCMD} registry create-bucket -u https://localhost:18080 -bn idol-flow`\necho BUCKETID=${BUCKETID}\nFLOWID=`${NIFITOOLKITCMD} registry create-flow -u https://localhost:18080 -b ${BUCKETID} -fn \"IDOL NiFi Flow\"`\necho FLOWID=${FLOWID}\nFLOWVERSION=`${NIFITOOLKITCMD} registry import-flow-version -u https://localhost:18080 -f ${FLOWID} -i /opt/mf/resources/IDOL_NiFi_Flow_v3.json`\necho FLOWVERSION=${FLOWVERSION}\nPROCESSGROUP=`${NIFITOOLKITCMD} nifi pg-import -b ${BUCKETID} -f ${FLOWID} -fv ${FLOWVERSION}`\necho PROCESSGROUP=${PROCESSGROUP}\nPARAMCONTEXT=`${NIFITOOLKITCMD} nifi pg-get-param-context -pgid ${PROCESSGROUP}`\necho PARAMCONTEXT=${PARAMCONTEXT}\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"IDOL Host\" -pv \"${IDOL_HOST}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"IDOL LicenseServer Host\" -pv \"${IDOL_LICENSESERVER_HOST}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Bucket\" -pv \"${S3_BUCKET}\"\necho Setting sensitive values...\nset +x\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Access Key\" -pv \"${S3_ACCESS}\"\n${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn \"Amazon S3 Secret Key\" -pv \"${S3_SECRET}\"\nset -x\necho Enabling services and starting processors...\n${NIFITOOLKITCMD} nifi pg-enable-services -pgid ${PROCESSGROUP} -verbose\n${NIFITOOLKITCMD} nifi pg-start -pgid ${PROCESSGROUP} -verbose",
                                "encoding": "plain",
                                "mode": "000744",
                                "owner": "nifi",
                                "group": "nifi"
                            },
                            "/opt/mf/nifi/enable_extensions.sh": {
                                "content": "#!/bin/bash -xe\nexport JAVA_HOME=/usr/lib/jvm/jre-11\nNIFITOOLKITCMD=/opt/mf/nifi-toolkit/bin/cli.sh\n${NIFITOOLKITCMD} registry download-bundle -bn optional-nars --group idol.nifi.connector -ar idol-nifi-connector-router-nar -ver 12.11.0-SNAPSHOT -od /opt/mf/nifi/extensions\n${NIFITOOLKITCMD} registry download-bundle -bn optional-nars --group idol.nifi.connector -ar idol-nifi-connector-amazons3 -ver 12.11.0-SNAPSHOT -od /opt/mf/nifi/extensions",
                                "encoding": "plain",
                                "mode": "000744",
                                "owner": "nifi",
                                "group": "nifi"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "configImportFlow": {
                        "commands": {
                            "000": {
                                "command": "sudo -u nifi /opt/mf/nifi/enable_extensions.sh",
                                "ignoreErrors": true
                            },
                            "001": {
                                "command": {
                                    "Fn::Join": ["", ["sudo -u nifi /opt/mf/nifi/import_flow.sh /opt/mf/resources/IDOL_NiFi_Flow_v3.json ", {
                                        "Ref": "referencetotestCdkBasicIdolStackDIHNestedStackDIHNestedStackResource05FEC6F1OutputstestCdkBasicIdolStackDIHDIHdihEC201EC9E31PrivateIp"
                                    }, " ", {
                                        "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                    }, " \"", {
                                        "Ref": "referencetotestCdkBasicIdolStackNiFiS3Bucket1C20744CRef"
                                    }, "\" \"", {
                                        "Ref": "referencetotestCdkBasicIdolStackNiFiS3AccessKeyED44530ARef"
                                    }, "\" \"", {
                                        "Ref": "referencetotestCdkBasicIdolStackNiFiS3SecretKey01A0DAA7Ref"
                                    }, "\""]]
                                },
                                "ignoreErrors": true
                            }
                        }
                    }
                }
            }
        }
    },
    "Mappings": {
        "NiFinifiEC2AmiMapB294FCFF": {
            "us-east-1": {
                "ami": "ami-0cdd20457da53d34b"
            }
        }
    },
    "Parameters": {
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNiFiInstanceType8EAB74CCRef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetpublicSubnet1SubnetB0946841Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackDIHNestedStackDIHNestedStackResource05FEC6F1OutputstestCdkBasicIdolStackDIHDIHdihEC201EC9E31PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNiFiS3Bucket1C20744CRef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNiFiS3AccessKeyED44530ARef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNiFiS3SecretKey01A0DAA7Ref": {
            "Type": "String"
        },
        "PublicSubnetCIDR": {
            "Type": "String"
        }
    },
    "Outputs": {
        "testCdkBasicIdolStackNiFiNiFinifiEC267E8B14EPrivateIp": {
            "Value": {
                "Fn::GetAtt": ["NiFinifiEC205F5AE68", "PrivateIp"]
            }
        },
        "testCdkBasicIdolStackNiFiNiFinifiEC267E8B14EPublicIp": {
            "Value": {
                "Fn::GetAtt": ["NiFinifiEC205F5AE68", "PublicIp"]
            }
        }
    }
}
