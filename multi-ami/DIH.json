{
    "Resources": {
        "DIHdihSecurityGroup49703CA9": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/DIH/DIH-dihSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9070",
                    "FromPort": 9070,
                    "IpProtocol": "tcp",
                    "ToPort": 9070
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 9070",
                    "FromPort": 9070,
                    "IpProtocol": "tcp",
                    "ToPort": 9070
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 9071",
                    "FromPort": 9071,
                    "IpProtocol": "tcp",
                    "ToPort": 9071
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9072",
                    "FromPort": 9072,
                    "IpProtocol": "tcp",
                    "ToPort": 9072
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "DIHdihEC2InstanceProfile5E34FD8B": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref"
                }]
            }
        },
        "DIHdihEC22711E5EF": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [0, {
                        "Fn::GetAZs": ""
                    }]
                },
                "IamInstanceProfile": {
                    "Ref": "DIHdihEC2InstanceProfile5E34FD8B"
                },
                "ImageId": {
                    "Fn::FindInMap": ["DIHdihEC2AmiMapE73E5773", {
                        "Ref": "AWS::Region"
                    }, "ami"]
                },
                "InstanceType": {
                    "Ref": "referencetotestCdkBasicIdolStackDIHInstanceType14850A0BRef"
                },
                "SecurityGroupIds": [{
                    "Fn::GetAtt": ["DIHdihSecurityGroup49703CA9", "GroupId"]
                }, {
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId"
                }],
                "SubnetId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "test-CdkBasicIdolStack/DIH/DIH-dihEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["#!/bin/bash\nyum install -y aws-cfn-bootstrap\n# fingerprint: d1baa5d87af06516\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource DIHdihEC22711E5EF -c dihcfg,install,addServicesToController\n  /opt/aws/bin/cfn-signal -e $? --region ", {
                            "Ref": "AWS::Region"
                        }, " --stack ", {
                            "Ref": "AWS::StackName"
                        }, " --resource DIHdihEC22711E5EF\n  cat /var/log/cfn-init.log >&2\n)"]]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "dihcfg": ["dihfiles"],
                        "install": ["installfiles"],
                        "addServicesToController": ["configAddServicesToController"]
                    },
                    "dihfiles": {
                        "files": {
                            "/opt/dih/dih.cfg": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[Service]\nServicePort=9072\nAccess-Control-Allow-Origin=http://localhost:9070\nXSLTemplates=FALSE\n\n[Server]\nPort=9070\nDIHPort=9071\n\nThreads=4\nMaxInputString=64000\nXSLTemplates=FALSE\nLogRequestTiming=TRUE\n\nMirrorMode=FALSE\nDistributeByReference=TRUE\nUseConsistentHashing=TRUE\nDocumentDelimiterCSVs=*/DOCUMENT\nMaximumRetries=10\n\n[AuthorizationRoles]\n0=AdminRole\n1=QueryRole\n2=IndexRole\n\n[AdminRole]\nStandardRoles=admin,servicecontrol,query,servicestatus\nClients=*\n\n[QueryRole]\nStandardRoles=query,servicestatus\nClients=*\n\n[IndexRole]\nStandardRoles=index\nActions=getpid,getstatus,indexergetstatus\nServiceActions=getstatusinfo\nClients=*\n\n[IndexQueue]\nIndexQueueMaxHistory=5000\nIndexQueueInitialSize=10240\n\n[ConsistentHashing]\nVirtualNodes=4096\nReplicas=0\n\n[DistributionIDOLServers]\nNumber=", {
                                            "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                                        },
                                        "\n\n[FieldProcessing]\n0=SetReferenceFields\n\n[SetReferenceFields]\nProperty=ReferenceFields\nPropertyFieldCSVs=*/DREREFERENCE\n\n[ReferenceFields]\nReferenceType=TRUE\nTrimSpaces=TRUE\n\n[Logging]\nLogArchiveDirectory=./logs/archive\nLogDirectory=./logs\n// These values apply to all streams, override on an individual basis\nLogLevel=normal\nLogExpireAction=compress\nLogOldAction=move\nLogMaxSizeKBs=20480\nLogTime=TRUE\n\n0=ApplicationLogStream\n1=ActionLogStream\n2=IndexLogStream\n\n[ApplicationLogStream]\nLogFile=application.log\nLogTypeCSVs=application\n\n[ActionLogStream]\nLogFile=action.log\nLogTypeCSVs=action\n\n[IndexLogStream]\nLogFile=index.log\nLogTypeCSVs=index\n"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "idol",
                                "group": "idol"
                            },
                            "/opt/setup/edit_hosts_file.sh": {
                                "content": {
                                    "Fn::Join": ["", ["#!/bin/bash -xe\n\nfunction applyContentHostNames() {\n  CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print ' '.join(json.load(sys.stdin).values())\")\n  CONTENT_COUNT=0\n  for ip in $CONTENT_IPS\n  do\n      echo \"$ip    content-instance-$CONTENT_COUNT\" >> /etc/hosts\n      CONTENT_COUNT=$((CONTENT_COUNT+1))\n  done\n}\n\necho \"127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance\" > /etc/hosts\necho \"::1          localhost6 localhost6.localdomain6\" >> /etc/hosts\napplyContentHostNames"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "/opt/setup/edit_hosts_file.sh"
                            }
                        }
                    },
                    "installfiles": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.DIHdihEC22711E5EF.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource DIHdihEC22711E5EF --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/dih/add_content_engines.sh": {
                                "content": {
                                    "Fn::Join": ["", ["#!/bin/bash -xe\n\nfunction addContentEngines() {\n  #Parse Content IP addresses and add them to the DIH config file\n  CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print ' '.join(json.load(sys.stdin).values())\")\n  IP_COUNTER=0\n  for ip in $CONTENT_IPS\n  do\n      echo -e \"\n\n[IDOLServer$IP_COUNTER]\nhost=content-instance-$IP_COUNTER\nport=9100\" >> /opt/dih/dih.cfg\n      IP_COUNTER=$(($IP_COUNTER+1))\n  done\n}\n\naddContentEngines"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "/opt/dih/add_content_engines.sh"
                            },
                            "001": {
                                "command": {
                                    "Fn::Join": ["", ["sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=", {
                                        "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                    }, "/\" /opt/controller/idol.common.cfg"]]
                                }
                            },
                            "002": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "controller": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "dih": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "configAddServicesToController": {
                        "commands": {
                            "000": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/dih/dih.exe&type=dih&name=dih&InitScriptPath=/etc/init.d/dih\""
                            }
                        }
                    }
                }
            }
        }
    },
    "Mappings": {
        "DIHdihEC2AmiMapE73E5773": {
            "us-east-1": {
                "ami": "ami-0d8a37b724b09059d"
            }
        }
    },
    "Parameters": {
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackDIHInstanceType14850A0BRef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp": {
            "Type": "String"
        },
        "PublicSubnetCIDR": {
            "Type": "String"
        },
        "PrivateSubnetCIDR": {
            "Type": "String"
        }
    },
    "Outputs": {
        "testCdkBasicIdolStackDIHDIHdihEC201EC9E31PrivateIp": {
            "Value": {
                "Fn::GetAtt": ["DIHdihEC22711E5EF", "PrivateIp"]
            }
        }
    }
}
