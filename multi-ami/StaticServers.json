{
    "Resources": {
        "StaticServersuiSecurityGroup9F52C7F2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/StaticServers/StaticServers-uiSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 8000",
                    "FromPort": 8000,
                    "IpProtocol": "tcp",
                    "ToPort": 8000
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 8080",
                    "FromPort": 8080,
                    "IpProtocol": "tcp",
                    "ToPort": 8080
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "StaticServersagentstoreSecurityGroup48F90117": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/StaticServers/StaticServers-agentstoreSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 9050",
                    "FromPort": 9050,
                    "IpProtocol": "tcp",
                    "ToPort": 9050
                }, {
                    "CidrIp": {
                        "Ref": "PublicSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PublicSubnetCIDR on port 9051",
                    "FromPort": 9051,
                    "IpProtocol": "tcp",
                    "ToPort": 9051
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9050",
                    "FromPort": 9050,
                    "IpProtocol": "tcp",
                    "ToPort": 9050
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9052",
                    "FromPort": 9052,
                    "IpProtocol": "tcp",
                    "ToPort": 9052
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "StaticServerscommunitySecurityGroup3F5DC040": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/StaticServers/StaticServers-communitySecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9030",
                    "FromPort": 9030,
                    "IpProtocol": "tcp",
                    "ToPort": 9030
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9032",
                    "FromPort": 9032,
                    "IpProtocol": "tcp",
                    "ToPort": 9032
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "StaticServersviewSecurityGroupD2A019D0": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/StaticServers/StaticServers-viewSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9080",
                    "FromPort": 9080,
                    "IpProtocol": "tcp",
                    "ToPort": 9080
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9082",
                    "FromPort": 9082,
                    "IpProtocol": "tcp",
                    "ToPort": 9082
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "StaticServersstaticServersEC2InstanceProfileB500078B": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref"
                }]
            }
        },
        "StaticServersstaticServersEC26B733F47": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [0, {
                        "Fn::GetAZs": ""
                    }]
                },
                "IamInstanceProfile": {
                    "Ref": "StaticServersstaticServersEC2InstanceProfileB500078B"
                },
                "ImageId": {
                    "Fn::FindInMap": ["StaticServersstaticServersEC2AmiMap4E48D359", {
                        "Ref": "AWS::Region"
                    }, "ami"]
                },
                "InstanceType": {
                    "Ref": "referencetotestCdkBasicIdolStackStaticServersInstanceType5C0337F9Ref"
                },
                "SecurityGroupIds": [{
                    "Fn::GetAtt": ["StaticServersuiSecurityGroup9F52C7F2", "GroupId"]
                }, {
                    "Fn::GetAtt": ["StaticServersagentstoreSecurityGroup48F90117", "GroupId"]
                }, {
                    "Fn::GetAtt": ["StaticServerscommunitySecurityGroup3F5DC040", "GroupId"]
                }, {
                    "Fn::GetAtt": ["StaticServersviewSecurityGroupD2A019D0", "GroupId"]
                }],
                "SubnetId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "test-CdkBasicIdolStack/StaticServers/StaticServers-staticServersEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["#!/bin/bash\nyum install -y aws-cfn-bootstrap\n# fingerprint: 04e8e9f06f7d2ca2\n(\n  set +e\n  /opt/aws/bin/cfn-init -v --region ", {
                                "Ref": "AWS::Region"
                            }, " --stack ", {
                                "Ref": "AWS::StackName"
                            },
                            " --resource StaticServersstaticServersEC26B733F47 -c instanceSetup,startAgentstore,startCommunity,bootstrapUsers,startView,startController,addServicesToController,startCoordinator,addControllers,startUIs\n  /opt/aws/bin/cfn-signal -e $? --region ", {
                                "Ref": "AWS::Region"
                            }, " --stack ", {
                                "Ref": "AWS::StackName"
                            }, " --resource StaticServersstaticServersEC26B733F47\n  cat /var/log/cfn-init.log >&2\n)"
                        ]]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "instanceSetup": ["configInstanceSetup"],
                        "startAgentstore": ["configStartAgentstore"],
                        "startCommunity": ["configStartCommunity"],
                        "bootstrapUsers": ["configBootstrapUsers"],
                        "startView": ["configStartView"],
                        "startController": ["configStartController"],
                        "addServicesToController": ["configAddServicesToController"],
                        "startCoordinator": ["configStartCoordinator"],
                        "addControllers": ["configAddControllers"],
                        "startUIs": ["configStartUIs"]
                    },
                    "configInstanceSetup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.StaticServersstaticServersEC26B733F47.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource StaticServersstaticServersEC26B733F47 --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/setup/edit_hosts_file.sh": {
                                "content": {
                                    "Fn::Join": ["", ["#!/bin/bash -xe\n\nfunction applyContentHostNames() {\n    CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print ' '.join(json.load(sys.stdin).values())\")\n    CONTENT_COUNT=0\n    for ip in $CONTENT_IPS\n    do\n        echo \"$ip    content-instance-$CONTENT_COUNT\" >> /etc/hosts\n        CONTENT_COUNT=$((CONTENT_COUNT+1))\n    done\n  }\n\n  echo \"127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance\" > /etc/hosts\n  echo \"::1          localhost6 localhost6.localdomain6\" >> /etc/hosts\n  applyContentHostNames\n  echo \"", {
                                            "Ref": "referencetotestCdkBasicIdolStackDAHNestedStackDAHNestedStackResource4DFA28D3OutputstestCdkBasicIdolStackDAHDAHdahEC284F800B5PrivateIp"
                                        }, "    dah-instance\" >> /etc/hosts\n  echo \"", {
                                            "Ref": "referencetotestCdkBasicIdolStackDIHNestedStackDIHNestedStackResource05FEC6F1OutputstestCdkBasicIdolStackDIHDIHdihEC201EC9E31PrivateIp"
                                        }, "    dih-instance\" >> /etc/hosts\n  echo \"", {
                                            "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                        }, "    license-server-instance\" >> /etc/hosts"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "/opt/setup/edit_hosts_file.sh"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "configStartAgentstore": {
                        "commands": {
                            "000": {
                                "command": "mv /opt/content/alt_configs/agentstore.cfg /opt/content/content.cfg"
                            },
                            "001": {
                                "command": "chown idol:idol content.cfg",
                                "cwd": "/opt/content"
                            },
                            "002": {
                                "command": "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/content/idol.common.cfg"
                            },
                            "003": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/content/idol.common.cfg"
                            },
                            "004": {
                                "command": "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/XXX_ACI_THREADS_XXX/$ACI_THREADS/g\" /opt/content/content.cfg"
                            },
                            "005": {
                                "command": "sed -i \"s/ACIPORT=9100/ACIPORT=9050/\" /etc/init.d/content"
                            },
                            "006": {
                                "command": "sed -i \"s/SERVICEPORT=9102/SERVICEPORT=9052/\" /etc/init.d/content"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "content": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    },
                    "configStartCommunity": {
                        "files": {
                            "/opt/community/bootstrap_users.sh": {
                                "content": "#!/bin/bash -xe\n\nfunction bootstrapUsers() {\n    local ADMIN_USERNAME=admin\n    local ADMIN_PASSWORD=$(cat /opt/community/random_password.txt)\n    local HTTP_SCHEME=http\n    local COMMUNITY_PORT=9030\n\n    if [ -e adduser.admin.xml ]\n    then\n        echo \"Community already bootstrapped\"\n    else\n        echo \"Bootstrapping community\"\n        wget -qO adduser.admin.xml --no-proxy \"$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=UserAdd&userName=$ADMIN_USERNAME&password=$ADMIN_PASSWORD\" --no-check-certificate\n        for role in FindUser FindAdmin FindBI useradmin\n        do\n            wget -qO addrole.$role.xml --no-proxy \"$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAdd&roleName=$role\" --no-check-certificate\n            wget -qO addrole.$role.admin.xml --no-proxy \"$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAddUserToRole&RoleName=$role&userName=$ADMIN_USERNAME\" --no-check-certificate\n        done\n    fi\n}\n\nbootstrapUsers",
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "idol",
                                "group": "idol"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/community/idol.common.cfg"
                            },
                            "001": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/community/idol.common.cfg"
                            },
                            "002": {
                                "command": "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/community/community.cfg"
                            },
                            "003": {
                                "command": "sed -i \"0,/host=localhost/{s/host=localhost/host=dah-instance/}\" /opt/community/community.cfg"
                            },
                            "004": {
                                "command": "sed -i \"0,/aciport=9100/{s/aciport=9100/aciport=9060/}\" /opt/community/community.cfg"
                            },
                            "005": {
                                "command": "sed -i \"s/SecurityInfoKeys=\\/path\\/to\\/aes.keyfile/SecurityInfoKeys=\\/opt\\/community\\/aes.key/\" /opt/community/community.cfg"
                            },
                            "006": {
                                "command": "/opt/community/autpassword.exe -x -tAES -oKeyFile=/opt/community/aes.key"
                            },
                            "007": {
                                "command": "chown idol:idol aes.key",
                                "cwd": "/opt/community"
                            },
                            "008": {
                                "command": "openssl rand -hex 16 > /opt/community/random_password.txt"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "community": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    },
                    "configBootstrapUsers": {
                        "commands": {
                            "000": {
                                "command": "/opt/community/bootstrap_users.sh"
                            }
                        }
                    },
                    "configStartView": {
                        "commands": {
                            "000": {
                                "command": "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/view/idol.common.cfg"
                            },
                            "001": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/view/idol.common.cfg"
                            },
                            "002": {
                                "command": "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/view/view.cfg"
                            },
                            "003": {
                                "command": "sed -i \"s/IDOLPort=9060/IDOLPort=9050/\" /opt/view/view.cfg"
                            },
                            "004": {
                                "command": {
                                    "Fn::Join": ["", [
                                        "sed -i 's#[[]Viewing[]]#[UniversalViewing]\\\nEnabled=TRUE\\\nDocumentStoreHost=dah-instance\\\nDocumentStorePort=9060\\\nDistributedConnectorReferenceField=AUTN_IDENTIFIER\\\nFileSystemReferenceField=ORIGINAL_LOCATION\\\nConnectorGroupField=CONNECTOR_GROUP\\\n\\\n[Viewing]\\\nDistributedConnectorHost=", {
                                            "Ref": "referencetotestCdkBasicIdolStackNiFiNestedStackNiFiNestedStackResource52C694A0OutputstestCdkBasicIdolStackNiFiNiFinifiEC267E8B14EPrivateIp"
                                        }, "\\\nDistributedConnectorPort=10000\\\nLegacyRendering=TRUE\\\n#' /opt/view/view.cfg"
                                    ]]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "view": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    },
                    "configStartController": {
                        "commands": {
                            "000": {
                                "command": "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/controller/idol.common.cfg"
                            },
                            "001": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "controller": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    },
                    "configAddServicesToController": {
                        "commands": {
                            "000": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/content/content.exe&type=content&name=agentstore&InitScriptPath=/etc/init.d/content\""
                            },
                            "001": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/community/community.exe&type=community&name=community&InitScriptPath=/etc/init.d/community\""
                            },
                            "002": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/view/view.exe&type=view&name=view&InitScriptPath=/etc/init.d/view\""
                            }
                        }
                    },
                    "configStartCoordinator": {
                        "files": {
                            "/opt/coordinator/register_content_engine_controllers.sh": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#!/bin/bash -xe\n\nfunction registerContentEngineControllers() {\n  #Parse Content IP addresses and register their controllers\n  NUM_CONTENT_IPS=$(echo '", {
                                            "Ref": "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData"
                                        },
                                        "' | python -c \"import sys, json; print len(json.load(sys.stdin).values())\")\n  LOOP_MAX=$((NUM_CONTENT_IPS-1))\n  i=0\n  while [[ $i -le $LOOP_MAX ]]\n  do\n      RESP=$(curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=content-instance-$i&Port=41200\")\n      echo $RESP\n      ((i = i + 1))\n  done\n}\n\nregisterContentEngineControllers"
                                    ]]
                                },
                                "encoding": "plain",
                                "mode": "000500",
                                "owner": "idol",
                                "group": "idol"
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/coordinator/idol.common.cfg"
                            },
                            "001": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/coordinator/idol.common.cfg"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "coordinator": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    },
                    "configAddControllers": {
                        "commands": {
                            "000": {
                                "command": "/opt/coordinator/register_content_engine_controllers.sh"
                            },
                            "001": {
                                "command": "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dah-instance&Port=41200\""
                            },
                            "002": {
                                "command": "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dih-instance&Port=41200\""
                            },
                            "003": {
                                "command": "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=static-servers-instance&Port=41200\""
                            },
                            "004": {
                                "command": "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=license-server-instance&Port=41200\""
                            }
                        }
                    },
                    "configStartUIs": {
                        "packages": {
                            "yum": {
                                "jq": []
                            }
                        },
                        "commands": {
                            "000": {
                                "command": "chmod -R 777 home",
                                "cwd": "/opt/find"
                            },
                            "001": {
                                "command": "jq '.login.community.host = \"localhost\"' config.json | jq '.login.defaultLogin.username=null' | jq '.login.defaultLogin.password=null' | jq '.login.method=\"autonomy\"' | jq '.content.host = \"dah-instance\"' | jq '.content.port = 9060' | jq '.view.host = \"localhost\"' | jq '.mmap.enabled = false' > config_rewrite.json",
                                "cwd": "/opt/find/home"
                            },
                            "002": {
                                "command": "mv config_rewrite.json config.json",
                                "cwd": "/opt/find/home"
                            },
                            "003": {
                                "command": "chown find:find config.json",
                                "cwd": "/opt/find/home"
                            },
                            "004": {
                                "command": "chmod 755 home && chmod 664 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*",
                                "cwd": "/opt/find"
                            },
                            "005": {
                                "command": "chmod -R 777 home",
                                "cwd": "/opt/siteadmin"
                            },
                            "006": {
                                "command": "jq '.login.defaultLogin.username = null' config.json | jq '.login.defaultLogin.password = null' | jq '.login.method = \"autonomy\"' | jq '.login.community.host = \"localhost\"' | jq '.coordinator.host = \"localhost\"' > config_rewrite.json",
                                "cwd": "/opt/siteadmin/home"
                            },
                            "007": {
                                "command": "mv config_rewrite.json config.json",
                                "cwd": "/opt/siteadmin/home"
                            },
                            "008": {
                                "command": "chown siteadmin:siteadmin config.json",
                                "cwd": "/opt/siteadmin/home"
                            },
                            "009": {
                                "command": "chmod 755 home && chmod 664 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*",
                                "cwd": "/opt/siteadmin"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "find": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "siteadmin": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "Mappings": {
        "StaticServersstaticServersEC2AmiMap4E48D359": {
            "us-east-1": {
                "ami": "ami-055fb5b2d4cde6ac5"
            }
        }
    },
    "Parameters": {
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackrootRole11B9F8D3Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackStaticServersInstanceType5C0337F9Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEnginesNestedStackEnginesNestedStackResourceEEF846C2OutputstestCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackDAHNestedStackDAHNestedStackResource4DFA28D3OutputstestCdkBasicIdolStackDAHDAHdahEC284F800B5PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackDIHNestedStackDIHNestedStackResource05FEC6F1OutputstestCdkBasicIdolStackDIHDIHdihEC201EC9E31PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNiFiNestedStackNiFiNestedStackResource52C694A0OutputstestCdkBasicIdolStackNiFiNiFinifiEC267E8B14EPrivateIp": {
            "Type": "String"
        },
        "PublicSubnetCIDR": {
            "Type": "String"
        },
        "PrivateSubnetCIDR": {
            "Type": "String"
        }
    },
    "Outputs": {
        "testCdkBasicIdolStackStaticServersStaticServersstaticServersEC28049B14CPrivateIp": {
            "Value": {
                "Fn::GetAtt": ["StaticServersstaticServersEC26B733F47", "PrivateIp"]
            }
        }
    }
}
