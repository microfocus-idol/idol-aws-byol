AWSTemplateFormatVersion: '2010-09-09'

Description: Amazon AWS EC2 template for Basic IDOL deployment (networking)

Parameters:
  VpcCIDR:
    Type: String
    Description: 'The CIDR of the VPC. Smallest block /27; e.g. 172.16.0.0/27.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-7]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /27'

  PublicSubnetCIDR:
    Type: String
    Description: 'The CIDR of the Public Subnet. Subnet of VpcCIDR, disjoint of PrivateSubnetCIDR, smallest block /28 e.g. 172.16.0.0/28.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-8]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /28'

  PrivateSubnetCIDR:
    Type: String
    Description: 'The CIDR of the Private Subnet. Subnet of VpcCIDR, disjoint of PublicSubnetCIDR, smallest block /28 e.g. 172.16.0.16/28.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-8]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /28'

  PublicAccessCIDR:
    Type: String
    Description: 'The CIDR of IP addresses allowed to access the "public" interfaces of the system'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(3[012]|[12]?\d)'
    ConstraintDescription: 'must be a valid IPv4 CIDR'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # This is the interface endpoint for CloudFormation. You can only deploy this
  # once per region since it will consume the unique DNS entry for the endpoint.
  # Allows instances in the private subnet to use cfn-signal for their CreationPolicy
  CfnEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref EndpointSG
  
  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Traffic into CloudFormation Endpoint"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} EndpointSG"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Route Table"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PublicAccessCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "NatGateway-${AWS::StackName}"
  
  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: !Ref PublicAccessCIDR
      NatGatewayId: !Ref NatGateway0


  NatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Route Table"

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref NatRouteTable
        - !Ref PublicRouteTable
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"


  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable
      SubnetId: !Ref PrivateSubnet


  GatewayProxySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Inbound HTTP/HTTPS Traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9051
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 9070
          ToPort: 9071
          CidrIp: !Ref PublicAccessCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName} Gateway Proxy SG"

Outputs:
  GatewayProxySG:
    Value: !Ref GatewayProxySG
  VPC:
    Value: !Ref VPC
  NatRoute0:
    Value: !Ref NatRoute0
  CfnEndpoint:
    Value: !Ref CfnEndpoint
  PrivateSubnet:
    Value: !Ref PrivateSubnet
  PublicSubnet:
    Value: !Ref PublicSubnet
