{
    "Resources": {
        "EnginesenginesSecurityGroupF5C2BF96": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "test-CdkBasicIdolStack/Engines/Engines-enginesSecurityGroup",
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "Description": "Allow all outbound traffic by default",
                    "IpProtocol": "-1"
                }],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9100",
                    "FromPort": 9100,
                    "IpProtocol": "tcp",
                    "ToPort": 9100
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9101",
                    "FromPort": 9101,
                    "IpProtocol": "tcp",
                    "ToPort": 9101
                }, {
                    "CidrIp": {
                        "Ref": "PrivateSubnetCIDR"
                    },
                    "Description": "Allow inbound traffic in PrivateSubnetCIDR on port 9102",
                    "FromPort": 9102,
                    "IpProtocol": "tcp",
                    "ToPort": 9102
                }],
                "VpcId": {
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref"
                }
            }
        },
        "EnginesenginesWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "EnginesenginesLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateData": {
                    "IamInstanceProfile": {
                        "Arn": {
                            "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackprivateProfileC2EA387CArn"
                        }
                    },
                    "ImageId": "ami-0d98681590207b843",
                    "InstanceType": {
                        "Ref": "referencetotestCdkBasicIdolStackContentInstanceType0797D267Ref"
                    },
                    "SecurityGroupIds": [{
                        "Fn::GetAtt": ["EnginesenginesSecurityGroupF5C2BF96", "GroupId"]
                    }, {
                        "Ref": "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId"
                    }],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": ["", ["#!/bin/bash -xe\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ", {
                                    "Ref": "AWS::StackName"
                                }, " --resource EnginesenginesLaunchTemplate --region ", {
                                    "Ref": "AWS::Region"
                                }, " -c instanceSetup && /opt/aws/bin/cfn-init -v --stack ", {
                                    "Ref": "AWS::StackName"
                                }, " --resource EnginesenginesLaunchTemplate --region ", {
                                    "Ref": "AWS::Region"
                                },
                                " -c addServicesToController\nIP_ADDR=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\nUUID=$(cat /proc/sys/kernel/random/uuid)\nSIGNAL_ID=IPAddr_$UUID\n/opt/aws/bin/cfn-signal --success true --reason \"Configuration complete\" --data $IP_ADDR --id $SIGNAL_ID --exit-code 0 \"", {
                                    "Ref": "EnginesenginesWaitHandle"
                                }, "\""
                            ]]
                        }
                    }
                },
                "LaunchTemplateName": "enginesLaunchTemplate"
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "instanceSetup": ["configInstanceSetup"],
                        "addServicesToController": ["configAddServicesToController"]
                    },
                    "configInstanceSetup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", ["[main]\nstack=", {
                                        "Ref": "AWS::StackId"
                                    }, "\nregion=", {
                                        "Ref": "AWS::Region"
                                    }, "\ninterval=1"]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\ntriggers=post.update,\npath=Resources.EnginesenginesLaunchTemplate.Metadata.AWS::CloudFormation::Init,\naction=../../opt/aws/bin/cfn-init  --stack ", {
                                            "Ref": "AWS::StackId"
                                        }, " --resource EnginesenginesLaunchTemplate --region ", {
                                            "Ref": "AWS::Region"
                                        }, "\nrunas=root"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01-setContentLicenseServer": {
                                "command": {
                                    "Fn::Join": ["", ["sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=", {
                                        "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                    }, "/\" /opt/content/idol.common.cfg"]]
                                }
                            },
                            "02-setContentACIThreads": {
                                "command": "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/XXX_ACI_THREADS_XXX/$ACI_THREADS/g\" /opt/content/content.cfg"
                            },
                            "03-setContentClients": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/content/idol.common.cfg"
                            },
                            "04-setControllerLicenseServer": {
                                "command": {
                                    "Fn::Join": ["", ["sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=", {
                                        "Ref": "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp"
                                    }, "/\" /opt/controller/idol.common.cfg"]]
                                }
                            },
                            "05-setControllerClients": {
                                "command": "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "controller": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "content": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    },
                    "configAddServicesToController": {
                        "commands": {
                            "01-addContentToController": {
                                "command": "curl \"http://localhost:41200/action=addService&ExecPath=/opt/content/content.exe&type=content&name=content&InitScriptPath=/etc/init.d/content\""
                            }
                        }
                    }
                }
            }
        },
        "EnginesenginesAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "MaxSize": {
                    "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                },
                "MinSize": {
                    "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                },
                "DesiredCapacity": {
                    "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                },
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "EnginesenginesLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": ["EnginesenginesLaunchTemplate", "LatestVersionNumber"]
                    }
                },
                "VPCZoneIdentifier": [{
                    "Ref": "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef"
                }]
            }
        },
        "EnginesenginesWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Count": {
                    "Ref": "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref"
                },
                "Handle": {
                    "Ref": "EnginesenginesWaitHandle"
                },
                "Timeout": "1200"
            }
        }
    },
    "Parameters": {
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpc80062619Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackContentInstanceType0797D267Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackcontrollerSecurityGroupCFE64FCCGroupId": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStacktestCdkBasicIdolStackprivateProfileC2EA387CArn": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackLicensingNestedStackLicensingNestedStackResource12430BEAOutputstestCdkBasicIdolStackLicensingLicensinglsEC2CB10DCC5PrivateIp": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackEngineCountC7B97AF5Ref": {
            "Type": "String"
        },
        "referencetotestCdkBasicIdolStackNetworkStackNestedStackNetworkStackNestedStackResourceA7021F01OutputstestCdkBasicIdolStackNetworkStackNetworkStackVpcNetworkStacksubnetprivateSubnet1Subnet5C66795ERef": {
            "Type": "String"
        },
        "PrivateSubnetCIDR": {
            "Type": "String"
        }
    },
    "Outputs": {
        "testCdkBasicIdolStackEnginesEnginesenginesWaitConditionD3CFDAAAData": {
            "Value": {
                "Fn::GetAtt": ["EnginesenginesWaitCondition", "Data"]
            }
        }
    }
}
