AWSTemplateFormatVersion: '2010-09-09'

Description: Amazon AWS EC2 template for Basic IDOL deployment

Parameters:
  ContentInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the Content instance'
    Default: c5d.2xlarge
    AllowedValues: [
                     "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                     "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                     "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                     "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                     "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                     "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                     "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                     "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                     "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                     "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                     "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                     "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                     "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                     "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                     "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                     "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                     "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                     "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                     "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                     "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                     "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                     "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                     "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                     "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                     "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                     "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                     "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                     "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                     "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                     "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                     "p4d.24xlarge",
                     "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                     "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                     "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                     "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                     "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                     "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                     "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                     "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                     "x1.16xlarge", "x1.32xlarge",
                     "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                     "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                     "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                   ]
  DAHInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the DAH instance'
    Default: t2.small
    AllowedValues: [
                    "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  DIHInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the DIH instance'
    Default: t2.small
    AllowedValues: [
                    "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  StaticServersInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the static servers instance'
    Default: t2.medium
    AllowedValues: [
                    "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  LicenseServerInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the LicenseServer instance'
    Default: t2.micro
    AllowedValues: [
                    "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
                  
  GatewayProxyInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the Gateway Proxy instance'
    Default: t2.micro
    AllowedValues: [
                    "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  NiFiInstanceType:
    Type: String
    Description: 'AWS EC2 InstanceType for the NiFi instance'
    Default: t3.medium
    AllowedValues: [
                    "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge",
                    "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
                    "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge",
                    "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
                    "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal",
                    "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge",
                    "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge",
                    "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal",
                    "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal",
                    "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
                    "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge",
                    "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge",
                    "f1.2xlarge", "f1.4xlarge", "f1.16xlarge",
                    "g3s.xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge",
                    "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge",
                    "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.16xlarge", "g4dn.12xlarge", "g4dn.metal",
                    "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge" ,
                    "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal",
                    "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal",
                    "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge",
                    "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
                    "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal",
                    "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge",
                    "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge",
                    "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal",
                    "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal",
                    "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal",
                    "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal",
                    "p2.xlarge", "p2.8xlarge", "p2.16xlarge",
                    "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge",
                    "p4d.24xlarge",
                    "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
                    "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal",
                    "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge",
                    "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge",
                    "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge",
                    "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal",
                    "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal",
                    "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal",
                    "x1.16xlarge", "x1.32xlarge",
                    "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge",
                    "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal",
                    "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"
                  ]
  EngineCount:
    Type: Number
    Description: 'The number of Content engines to deploy'
    Default: 1
    MinValue: 1
    MaxValue: 5
  NiFiS3Bucket:
    Type: String
    Description: S3 Bucket to ingest
  NiFiS3AccessKey:
    Type: String
    Description: AWS Access Key with access to S3 bucket 
    NoEcho: true
  NiFiS3SecretKey:
    Type: String
    Description: AWS Secret Key with access to S3 bucket
    NoEcho: true
  
  LicenseKeyBucketName:
    Type: String
    Description: 'Name of S3 bucket containing license key to deploy'
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      The bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
  LicenseKeyBucketRegion:
    Type: String
    Description: 'The AWS Region where the S3 bucket containing the license key (LicenseKeyBucketName) is hosted.'
    AllowedValues: [
      "us-east-1", "us-east-2", "us-west-1", "us-west-2", "af-south-1", "ap-east-1", "ap-south-1",
      "ap-northeast-1", "ap-northeast-2", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2",
      "ca-central-1", "eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-south-1", "eu-north-1",
      "me-south-1", "sa-east-1", "us-gov-east-1", "us-gov-west-1"]
  LicenseKeyBucketPath:
    Type: String
    Description: 'Path to license key within the bucket'
    Default: 'licensekey.dat'

  VpcCIDR:
    Type: String
    Description: 'The CIDR of the VPC. Smallest block /27; e.g. 172.16.0.0/27.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-7]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /27'

  PublicSubnetCIDR:
    Type: String
    Description: 'The CIDR of the Public Subnet. Subnet of VpcCIDR, disjoint of PrivateSubnetCIDR, smallest block /28 e.g. 172.16.0.0/28.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-8]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /28'

  PrivateSubnetCIDR:
    Type: String
    Description: 'The CIDR of the Private Subnet. Subnet of VpcCIDR, disjoint of PublicSubnetCIDR, smallest block /28 e.g. 172.16.0.16/28.'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(2[0-8]|1[0-9]|[0-9])'
    ConstraintDescription: 'must be a valid IPv4 CIDR with smallest block of /28'

  PublicAccessCIDR:
    Type: String
    Description: 'The CIDR of IP addresses allowed to access the "public" interfaces of the system'
    AllowedPattern: '((2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})\.){3}(2[0-4]\d|25[0-5]|1\d{2}|\d{1,2})/(3[012]|[12]?\d)'
    ConstraintDescription: 'must be a valid IPv4 CIDR'

  Country:
    Type: String
    Description: 'Value to use in the Country field of the self-signed certificate'

  StateProvinceCounty:
    Type: String
    Description: 'Value to use in the State/Province/County field of the self-signed certificate'

  Locality:
    Type: String
    Description: 'Value to use in the Locality field of the self-signed certificate'

  Organisation:
    Type: String
    Description: 'Value to use in the Organisation field of the self-signed certificate'

  OrganisationalUnit:
    Type: String
    Description: 'Value to use in the Organisational Unit field of the self-signed certificate'

  EmailAddress:
    Type: String
    Description: 'Value to use in the Email Address field of the self-signed certificate'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Access Configuration"
        Parameters:
          - PublicAccessCIDR
      - Label:
          default: "IDOL Deployment Size"
        Parameters:
          - EngineCount
      - Label:
          default: "InstanceType Configuration"
        Parameters:
          - ContentInstanceType
          - DAHInstanceType
          - DIHInstanceType
          - StaticServersInstanceType
          - LicenseServerInstanceType
          - GatewayProxyInstanceType
          - NiFiInstanceType
      - Label:
          default: "License Configuration"
        Parameters:
          - LicenseKeyBucketName
          - LicenseKeyBucketPath
          - LicenseKeyBucketRegion
      - Label:
          default: "Self-Signed Certificate Configuration"
        Parameters:
          - Country
          - StateProvinceCounty
          - Locality
          - Organisation
          - OrganisationalUnit
          - EmailAddress
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
      - Label:
          default: "NiFi ingest configuration"
        Parameters:
          - NiFiS3Bucket
          - NiFiS3AccessKey
          - NiFiS3SecretKey

Mappings:
  RegionMap:
    us-east-1:
      IDOLContent: ami-0d98681590207b843
      IDOLDAH: ami-0260d0dc29629e0f5
      IDOLDIH: ami-0d8a37b724b09059d
      IDOLLicenseServer: ami-0f1d2b0f5616ab077
      IDOLStaticServers: ami-055fb5b2d4cde6ac5
      IDOLNiFi: ami-0367e88d825235d43
      GatewayProxy: ami-0ab4d1e9cf9a1215a # /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # This is the interface endpoint for CloudFormation. You can only deploy this
  # once per region since it will consume the unique DNS entry for the endpoint.
  # Allows instances in the private subnet to use cfn-signal for their CreationPolicy
  CfnEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref EndpointSG

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Route Table"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PublicAccessCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "NatGateway-${AWS::StackName}"
  
  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: !Ref PublicAccessCIDR
      NatGatewayId: !Ref NatGateway0


  NatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Route Table"

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref NatRouteTable
        - !Ref PublicRouteTable
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"


  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable
      SubnetId: !Ref PrivateSubnet


  GatewayProxySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Inbound HTTP/HTTPS Traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9051
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 9070
          ToPort: 9071
          CidrIp: !Ref PublicAccessCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName} Gateway Proxy SG"      

  GatewayProxyInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup:
            - configInstanceSetup

        configInstanceSetup:
          packages:
            yum:
              httpd: []
              mod_ssl: []

          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.GatewayProxyInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource GatewayProxyInstance --region ${AWS::Region}

            /etc/httpd/conf.d/idol.conf:
              content: !Sub |
                Listen 443 https
                Listen 9050 https
                Listen 9051 https
                Listen 9070 https
                Listen 9071 https

                ProxyRequests Off
                ProxyPreserveHost On

                SSLCertificateFile /etc/tls/gateway-cert.pem
                SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA
                SSLEngine on
                SSLProxyEngine on
                SSLProtocol all -SSLv3
                SSLProxyCheckPeerCN off
                SSLProxyCheckPeerExpire off
                SSLCryptoDevice builtin
                SSLRandomSeed startup builtin
                SSLRandomSeed connect builtin

                ErrorLog logs/ssl_error_log
                TransferLog logs/ssl_access_log
                LogLevel warn

                <VirtualHost _default_:443>
                  <Location /find/>
                    ProxyPass http://${IdolStaticServersInstance.PrivateIp}:8000/
                    ProxyPassReverse /
                  </Location>
                
                  <Location /siteadmin/>
                    ProxyPass http://${IdolStaticServersInstance.PrivateIp}:8080/
                    ProxyPassReverse /
                  </Location>
                
                  <Location /licenseserver/>
                    ProxyPass http://${IdolLicenseServerInstance.PrivateIp}:20000/
                    ProxyPassReverse /
                  </Location>
                </VirtualHost>
                
                <VirtualHost *:9070>
                  <Location "/">
                    ProxyPass http://${IdolDIHInstance.PrivateIp}:9070/
                    ProxyPassReverse /
                  </Location>
                </VirtualHost>
                
                <VirtualHost *:9071>
                  <Location "/">
                    ProxyPass http://${IdolDIHInstance.PrivateIp}:9071/
                    ProxyPassReverse /
                  </Location>
                </VirtualHost>
                
                <VirtualHost *:9050>
                  <Location "/">
                    ProxyPass http://${IdolStaticServersInstance.PrivateIp}:9050/
                    ProxyPassReverse /
                  </Location>
                </VirtualHost>
                
                <VirtualHost *:9051>
                  <Location "/">
                    ProxyPass http://${IdolStaticServersInstance.PrivateIp}:9051/
                    ProxyPassReverse /
                  </Location>
                </VirtualHost>

          commands:
            01-make_certificate_dir:
              command: "mkdir -p /etc/tls"
            02-check_public_ip:
              command: "GATEWAY_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
            03-generate_certificate:
              command: !Sub "openssl req -x509 -sha256 -nodes -days 90 -newkey rsa:4096 -keyout /etc/tls/gateway.key -out /etc/tls/gateway-cert.pem -subj \"/C=${Country}/ST=${StateProvinceCounty}/L=${Locality}/O=${Organisation}/OU=${OrganisationalUnit}/CN=$GATEWAY_IP/emailAddress=${EmailAddress}\""
            04-make_haproxy_certificate:
              command: "cat /etc/tls/gateway.key | tee -a /etc/tls/gateway-cert.pem"
            05-cleanup_key:
              command: "rm /etc/tls/gateway.key"
            06-comment_httpd_welcome_conf:
              command: "sed -i 's/\\(^[^#].*$\\)/#\\1/' /etc/httpd/conf.d/welcome.conf"
            07-remove_httpd_ssl_conf:
              command: "rm /etc/httpd/conf.d/ssl.conf"
            08-remove_httpd_autoindex_conf:
              command: "rm /etc/httpd/conf.d/autoindex.conf"
            09-remove_httpd_userdir_conf:
              command: "rm /etc/httpd/conf.d/userdir.conf"

          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true

    Properties:
      InstanceType: !Ref GatewayProxyInstanceType
      SecurityGroupIds:
        - !Ref GatewayProxySG
      SubnetId: !Ref PublicSubnet
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, GatewayProxy ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource GatewayProxyInstance --region ${AWS::Region} -c instanceSetup
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource GatewayProxyInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Gateway Proxy Instance"


  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} RootRole"

  PrivateProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RootRole

  EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Traffic into CloudFormation Endpoint"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} EndpointSG"

  IdolLicenseServerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSMarketplaceMeteringFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Action:
                - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${LicenseKeyBucketName}/${LicenseKeyBucketPath}'
                Effect: Allow
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} LicenseServer Role"

  IdolLicenseServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref IdolLicenseServerRole

  IdolLicenseServerInstance:
    DependsOn: [NatRoute0, CfnEndpoint]
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Ref LicenseKeyBucketName
          roleName: !Ref IdolLicenseServerRole
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup:
            - configInstanceSetup
          addServicesToController:
            - configAddServicesToController
        configInstanceSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolLicenseServerInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolLicenseServerInstance --region ${AWS::Region}
                runas=root
            /opt/licenseserver/licensekey.dat:
              source: !Sub 'https://${LicenseKeyBucketName}.s3.${LicenseKeyBucketRegion}.${AWS::URLSuffix}/${LicenseKeyBucketPath}'
              owner: idol
              group: idol
              mode: '000644'
              authentication: 'S3AccessCreds'

          commands:
            01-setLicenseServerClients:
              command: 'sed -i "s/Clients=localhost/Clients=*/" /opt/licenseserver/idol.common.cfg'
            02-setControllerClients:
              command: 'sed -i "s/Clients=localhost/Clients=*/" /opt/controller/idol.common.cfg'

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true
              licenseserver:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/cfn-auto-reloader.conf

        configAddServicesToController:
          commands:
            01-addLicenseServerToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/licenseserver/licenseserver.exe&type=licenseserver&name=licenseserver&InitScriptPath=/etc/init.d/licenseserver"'

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

    Properties:
      IamInstanceProfile: !Ref IdolLicenseServerProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLLicenseServer ]
      InstanceType: !Ref LicenseServerInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt IdolLicenseServerSecurityGroup.GroupId
        - !GetAtt IdolControllerSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolLicenseServerInstance --region ${AWS::Region} -c instanceSetup &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolLicenseServerInstance --region ${AWS::Region} -c addServicesToController
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolLicenseServerInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} LicenseServer Instance"

  IdolLicenseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to LicenseServer ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 20000
          ToPort: 20000
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 20000
          ToPort: 20000
          CidrIp: !Ref PrivateSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} LicenseServer SG"

  IdolControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Controller ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 41200
          ToPort: 41200
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 41202
          ToPort: 41202
          CidrIp: !Ref PrivateSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Controller SG"

  IdolContentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Content ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9102
          CidrIp: !Ref PrivateSubnetCIDR

  IdolContentLaunchTemplate:
    DependsOn: [NatRoute0, CfnEndpoint]
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup:
            - configInstanceSetup
          addServicesToController:
            - configAddServicesToController
        configInstanceSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolContentInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolContentLaunchTemplate --region ${AWS::Region}
                runas=root

          commands:
            01-setContentLicenseServer:
              command: !Sub "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=${IdolLicenseServerInstance.PrivateIp}/\" /opt/content/idol.common.cfg"
            02-setContentACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/XXX_ACI_THREADS_XXX/$ACI_THREADS/g\" /opt/content/content.cfg"
            03-setContentClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/content/idol.common.cfg"
            04-setControllerLicenseServer:
              command: !Sub "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=${IdolLicenseServerInstance.PrivateIp}/\" /opt/controller/idol.common.cfg"
            05-setControllerClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true
              content:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        configAddServicesToController:
          commands:
            01-addContentToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/content/content.exe&type=content&name=content&InitScriptPath=/etc/init.d/content"'

    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt PrivateProfile.Arn
        ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLContent ]
        InstanceType: !Ref ContentInstanceType
        SecurityGroupIds:
          - !GetAtt IdolContentSecurityGroup.GroupId
          - !GetAtt IdolControllerSecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              # Update aws-cfn-bootstrap to the latest
              yum install -y aws-cfn-bootstrap
              # Call cfn-init script to install files and packages:
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolContentLaunchTemplate --region ${AWS::Region} -c instanceSetup &&
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolContentLaunchTemplate --region ${AWS::Region} -c addServicesToController
              #Obtain our IP address - we will send it as custom data when signalling
              IP_ADDR=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
              UUID=$(cat /proc/sys/kernel/random/uuid)
              SIGNAL_ID=IPAddr_$UUID
              # Call cfn-signal script to send our custom data - must use a unique id, hence the use of the UUID
              /opt/aws/bin/cfn-signal --success true --reason "Configuration complete" --data $IP_ADDR --id $SIGNAL_ID --exit-code 0 "${WaitURL}"
            - WaitURL: !Ref IdolContentWaitHandle

  IdolContentAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref IdolContentLaunchTemplate
        Version: !GetAtt IdolContentLaunchTemplate.LatestVersionNumber
      MinSize: !Sub ${EngineCount}
      MaxSize: !Sub ${EngineCount}
      DesiredCapacity: !Sub ${EngineCount}
      VPCZoneIdentifier:
        - !Ref PrivateSubnet

  IdolContentWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}

  IdolContentWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: IdolContentAutoscalingGroup
    Properties:
      Handle: !Ref IdolContentWaitHandle
      Timeout: "1200"
      Count: !Sub ${EngineCount}


  IdolDAHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to DAH ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9060
          ToPort: 9060
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9062
          ToPort: 9062
          CidrIp: !Ref PrivateSubnetCIDR


  IdolDAHInstance:
    DependsOn: [NatRoute0, CfnEndpoint]
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          dahcfg:
            - "dahfiles"
          install:
            - "installfiles"
          addServicesToController:
            - "configAddServicesToController"
        dahfiles:
          files:
            /opt/dah/dah.cfg:
              content: !Sub |
                [Service]
                ServicePort=9062
                Access-Control-Allow-Origin=http://localhost:9060
                XSLTemplates=TRUE

                [Server]
                Port=9060

                Threads=4
                MaxInputString=64000
                XSLTemplates=TRUE
                LogRequestTiming=TRUE

                AbridgedGetContentBatchSize=1000
                AbridgedThreshold=1000
                EngineMaxRetries=2
                EngineTimeout=60
                MirrorMode=FALSE
                SuggestTerms=40

                //Load Balancing
                DistributionMethod=1
                //Round Robin
                LoadBalanceMethod=1

                TimeBetweenRetries=60000
                SimpleCombinatorMode=true

                DistributedEngines=${EngineCount}

                [AuthorizationRoles]
                0=AdminRole
                1=QueryRole

                [AdminRole]
                StandardRoles=admin,servicecontrol,query,servicestatus
                Clients=*

                [QueryRole]
                StandardRoles=query,servicestatus
                Clients=*

                [Logging]
                LogArchiveDirectory=./logs/archive
                LogDirectory=./logs
                // These values apply to all streams, override on an individual basis
                LogLevel=normal
                LogExpireAction=compress
                LogOldAction=move
                LogMaxSizeKBs=20480
                LogTime=TRUE

                0=ApplicationLogStream
                1=ActionLogStream
                2=SecurityLogStream

                [ApplicationLogStream]
                LogFile=application.log
                LogTypeCSVs=application

                [ActionLogStream]
                LogFile=action.log
                LogTypeCSVs=action

                [SecurityLogStream]
                LogFile=security.log
                LogTypeCSVs=security
              mode: 000400
              owner: root
              group: root
            /opt/setup/edit_hosts_file.sh:
              content: !Sub |
                #!/bin/bash -xe

                function applyContentHostNames() {
                  CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                  CONTENT_COUNT=0
                  for ip in $CONTENT_IPS
                  do
                      echo "$ip    content-instance-$CONTENT_COUNT" >> /etc/hosts
                      CONTENT_COUNT=$((CONTENT_COUNT+1))
                  done
                }

                echo "127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance" > /etc/hosts
                echo "::1          localhost6 localhost6.localdomain6" >> /etc/hosts
                applyContentHostNames
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-editHostsFile:
              command: "/opt/setup/edit_hosts_file.sh"

        installfiles:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolDAHInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolDAHInstance --region ${AWS::Region} -c install
                runas=root
            /opt/dah/add_content_engines.sh:
              content: !Sub |
                #!/bin/bash -xe

                function addContentEngines() {
                  #Parse Content IP addresses and add them to the DAH config file
                  CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                  IP_COUNTER=0
                  for ip in $CONTENT_IPS
                  do
                      echo -e "\n\n[DistributedEngine$IP_COUNTER]\nhost=content-instance-$IP_COUNTER\nport=9100" >> /opt/dah/dah.cfg
                      IP_COUNTER=$(($IP_COUNTER+1))
                  done
                }

                addContentEngines
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-addContentEngines:
              command: "/opt/dah/add_content_engines.sh"
            02-setControllerLicenseServer:
              command: !Sub "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=${IdolLicenseServerInstance.PrivateIp}/\" /opt/controller/idol.common.cfg"
            03-setControllerClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/g\" /opt/controller/idol.common.cfg"

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true
              dah:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        configAddServicesToController:
          commands:
            01-addContentToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/dah/dah.exe&type=dah&name=dah&InitScriptPath=/etc/init.d/dah"'

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

    Properties:
      IamInstanceProfile: !Ref PrivateProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLDAH ]
      InstanceType: !Ref DAHInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt IdolDAHSecurityGroup.GroupId
        - !GetAtt IdolControllerSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update aws-cfn-bootstrap to the latest
          yum install -y aws-cfn-bootstrap
          #Call cfn-init script to create the DAH cfg we want
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDAHInstance --region ${AWS::Region} -c dahcfg &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDAHInstance --region ${AWS::Region} -c install &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDAHInstance --region ${AWS::Region} -c addServicesToController
          # Call cfn-signal script to send a signal with exit code
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolDAHInstance --region ${AWS::Region}

  IdolDIHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to DIH ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9070
          ToPort: 9070
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9070
          ToPort: 9070
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9071
          ToPort: 9071
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9072
          ToPort: 9072
          CidrIp: !Ref PrivateSubnetCIDR

  IdolDIHInstance:
    DependsOn: [NatRoute0, CfnEndpoint]
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          dihcfg:
            - "dihfiles"
          install:
            - "installfiles"
          addServicesToController:
            - "configAddServicesToController"
        dihfiles:
          files:
            /opt/dih/dih.cfg:
              content: !Sub |
                [Service]
                ServicePort=9072
                Access-Control-Allow-Origin=http://localhost:9070
                XSLTemplates=FALSE

                [Server]
                Port=9070
                DIHPort=9071

                Threads=4
                MaxInputString=64000
                XSLTemplates=FALSE
                LogRequestTiming=TRUE

                MirrorMode=FALSE
                DistributeByReference=TRUE
                UseConsistentHashing=TRUE
                DocumentDelimiterCSVs=*/DOCUMENT
                MaximumRetries=10

                [AuthorizationRoles]
                0=AdminRole
                1=QueryRole
                2=IndexRole

                [AdminRole]
                StandardRoles=admin,servicecontrol,query,servicestatus
                Clients=*

                [QueryRole]
                StandardRoles=query,servicestatus
                Clients=*

                [IndexRole]
                StandardRoles=index
                Actions=getpid,getstatus,indexergetstatus
                ServiceActions=getstatusinfo
                Clients=*

                [IndexQueue]
                IndexQueueMaxHistory=5000
                IndexQueueInitialSize=10240

                [ConsistentHashing]
                VirtualNodes=4096
                Replicas=0

                [DistributionIDOLServers]
                Number=${EngineCount}

                [FieldProcessing]
                0=SetReferenceFields

                [SetReferenceFields]
                Property=ReferenceFields
                PropertyFieldCSVs=*/DREREFERENCE

                [ReferenceFields]
                ReferenceType=TRUE
                TrimSpaces=TRUE

                [Logging]
                LogArchiveDirectory=./logs/archive
                LogDirectory=./logs
                // These values apply to all streams, override on an individual basis
                LogLevel=normal
                LogExpireAction=compress
                LogOldAction=move
                LogMaxSizeKBs=20480
                LogTime=TRUE

                0=ApplicationLogStream
                1=ActionLogStream
                2=IndexLogStream

                [ApplicationLogStream]
                LogFile=application.log
                LogTypeCSVs=application

                [ActionLogStream]
                LogFile=action.log
                LogTypeCSVs=action

                [IndexLogStream]
                LogFile=index.log
                LogTypeCSVs=index
              mode: 000400
              owner: root
              group: root
            /opt/setup/edit_hosts_file.sh:
              content: !Sub |
                #!/bin/bash -xe

                function applyContentHostNames() {
                  CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                  CONTENT_COUNT=0
                  for ip in $CONTENT_IPS
                  do
                      echo "$ip    content-instance-$CONTENT_COUNT" >> /etc/hosts
                      CONTENT_COUNT=$((CONTENT_COUNT+1))
                  done
                }

                echo "127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance" > /etc/hosts
                echo "::1          localhost6 localhost6.localdomain6" >> /etc/hosts
                applyContentHostNames
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-editHostsFile:
              command: "/opt/setup/edit_hosts_file.sh"

        installfiles:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolDIHInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolDIHInstance --region ${AWS::Region} -c install
                runas=root
            /opt/dih/add_content_engines.sh:
              content: !Sub |
                #!/bin/bash -xe

                function addContentEngines() {
                  #Parse Content IP addresses and add them to the DIH config file
                  CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                  IP_COUNTER=0
                  for ip in $CONTENT_IPS
                  do
                      echo -e "\n\n[IDOLServer$IP_COUNTER]\nhost=content-instance-$IP_COUNTER\nport=9100" >> /opt/dih/dih.cfg
                      IP_COUNTER=$(($IP_COUNTER+1))
                  done
                }

                addContentEngines
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-addContentEngines:
              command: "/opt/dih/add_content_engines.sh"
            02-setControllerLicenseServer:
              command: !Sub "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=${IdolLicenseServerInstance.PrivateIp}/\" /opt/controller/idol.common.cfg"
            03-setControllerClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/g\" /opt/controller/idol.common.cfg"

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true
              dih:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        configAddServicesToController:
          commands:
            01-addContentToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/dih/dih.exe&type=dih&name=dih&InitScriptPath=/etc/init.d/dih"'

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

    Properties:
      IamInstanceProfile: !Ref PrivateProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLDIH ]
      InstanceType: !Ref DIHInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt IdolDIHSecurityGroup.GroupId
        - !GetAtt IdolControllerSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update aws-cfn-bootstrap to the latest
          yum install -y aws-cfn-bootstrap
          #Call cfn-init script to create the DIH cfg we want
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDIHInstance --region ${AWS::Region} -c dihcfg &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDIHInstance --region ${AWS::Region} -c install &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolDIHInstance --region ${AWS::Region} -c addServicesToController
          # Call cfn-signal script to send a signal with exit code
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolDIHInstance --region ${AWS::Region}

  IdolUIsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to UI ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref PublicSubnetCIDR

  IdolAgentstoreSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Agentstore Index ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9050
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9050
          ToPort: 9050
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9051
          ToPort: 9051
          CidrIp: !Ref PublicSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9052
          ToPort: 9052
          CidrIp: !Ref PrivateSubnetCIDR

  CommunitySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable local access to Community ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9030
          ToPort: 9030
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9032
          ToPort: 9032
          CidrIp: !Ref PrivateSubnetCIDR

  ViewSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable local access to View ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: !Ref PrivateSubnetCIDR
        - IpProtocol: tcp
          FromPort: 9082
          ToPort: 9082
          CidrIp: !Ref PrivateSubnetCIDR


  IdolStaticServersInstance:
    DependsOn: [NatRoute0, CfnEndpoint]
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup:
            - configInstanceSetup
          startAgentstore:
            - configStartAgentstore
          startCommunity:
            - configStartCommunity
          bootstrapUsers:
            - configBootstrapUsers
          startView:
            - configStartView
          startController:
            - configStartController
          addServicesToController:
            - configAddServicesToController
          startCoordinator:
            - configStartCoordinator
          addControllers:
            - configAddControllers
          startUIs:
            - configStartUIs

        configInstanceSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolStaticServersInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region}
                runas=root
            /opt/setup/edit_hosts_file.sh:
              content: !Sub |
                #!/bin/bash -xe

                function applyContentHostNames() {
                  CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print \" \".join(json.load(sys.stdin).values())")
                  CONTENT_COUNT=0
                  for ip in $CONTENT_IPS
                  do
                      echo "$ip    content-instance-$CONTENT_COUNT" >> /etc/hosts
                      CONTENT_COUNT=$((CONTENT_COUNT+1))
                  done
                }

                echo "127.0.0.1    localhost localhost.localdomain localhost4 localhost4.localdomain4 static-servers-instance" > /etc/hosts
                echo "::1          localhost6 localhost6.localdomain6" >> /etc/hosts
                applyContentHostNames
                echo "${IdolDAHInstance.PrivateIp}    dah-instance" >> /etc/hosts
                echo "${IdolDIHInstance.PrivateIp}    dih-instance" >> /etc/hosts
                echo "${IdolLicenseServerInstance.PrivateIp}    license-server-instance" >> /etc/hosts
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-editHostsFile:
              command: "/opt/setup/edit_hosts_file.sh"

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf


        configStartAgentstore:
          commands:
            01-useAgentstoreConfig:
              command: "mv /opt/content/alt_configs/agentstore.cfg /opt/content/content.cfg"
            01a-setAgentstoreConfigOwner:
              command: "chown idol:idol content.cfg"
              cwd: "/opt/content"
            02-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/content/idol.common.cfg"
            03-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/content/idol.common.cfg"
            04-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/XXX_ACI_THREADS_XXX/$ACI_THREADS/g\" /opt/content/content.cfg"
            05-setServiceACIPort:
              command: "sed -i \"s/ACIPORT=9100/ACIPORT=9050/\" /etc/init.d/content"
            06-setServiceServicePort:
              command: "sed -i \"s/SERVICEPORT=9102/SERVICEPORT=9052/\" /etc/init.d/content"

          services:
            sysvinit:
              content:
                enabled: true
                ensureRunning: true

        configStartCommunity:
          files:
            /opt/community/bootstrap_users.sh:
              content: |
                #!/bin/bash -xe

                function bootstrapUsers() {
                    local ADMIN_USERNAME=admin
                    local ADMIN_PASSWORD=$(cat /opt/community/random_password.txt)
                    local HTTP_SCHEME=http
                    local COMMUNITY_PORT=9030

                    if [ -e adduser.admin.xml ]
                    then
                        echo "Community already bootstrapped"
                    else
                        echo "Bootstrapping community"
                        wget -qO adduser.admin.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=UserAdd&userName=$ADMIN_USERNAME&password=$ADMIN_PASSWORD" --no-check-certificate
                        for role in FindUser FindAdmin FindBI useradmin
                        do
                            wget -qO addrole.$role.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAdd&roleName=$role" --no-check-certificate
                            wget -qO addrole.$role.admin.xml --no-proxy "$HTTP_SCHEME://localhost:$COMMUNITY_PORT/a=RoleAddUserToRole&RoleName=$role&userName=$ADMIN_USERNAME" --no-check-certificate
                        done
                    fi
                }

                bootstrapUsers
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/community/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/community/idol.common.cfg"
            03-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/community/community.cfg"
            04-setDataDREHost:
              command: "sed -i \"0,/host=localhost/{s/host=localhost/host=dah-instance/}\" /opt/community/community.cfg"
            05-setDataDREPort:
              command: "sed -i \"0,/aciport=9100/{s/aciport=9100/aciport=9060/}\" /opt/community/community.cfg"
            06-setSecurityInfoKeysPath:
              command: "sed -i \"s/SecurityInfoKeys=\\/path\\/to\\/aes.keyfile/SecurityInfoKeys=\\/opt\\/community\\/aes.key/\" /opt/community/community.cfg"
            07-createAESKey:
              command: "/opt/community/autpassword.exe -x -tAES -oKeyFile=/opt/community/aes.key"
            07a-setAESKeyOwner:
              command: "chown idol:idol aes.key"
              cwd: "/opt/community"
            08-createPasswordFile:
              command: "openssl rand -hex 16 > /opt/community/random_password.txt"

          services:
            sysvinit:
              community:
                enabled: true
                ensureRunning: true

        configBootstrapUsers:
          commands:
            01-bootstrapUsers:
              command: "/opt/community/bootstrap_users.sh"

        configStartView:
          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/view/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/view/idol.common.cfg"
            03-setACIThreads:
              command: "ACI_THREADS=$(expr $(nproc --all) + 1) && sed -i \"s/Threads=4/Threads=$ACI_THREADS/g\" /opt/view/view.cfg"
            04-setDataDREHost:
              command: "sed -i \"s/IDOLPort=9060/IDOLPort=9050/\" /opt/view/view.cfg"
            05-updateViewCfg:
              command: !Sub | 
                sed -i 's#\[Viewing\]#[UniversalViewing]\
                Enabled=TRUE\
                DocumentStoreHost=dah-instance\
                DocumentStorePort=9060\
                DistributedConnectorReferenceField=AUTN_IDENTIFIER\
                FileSystemReferenceField=ORIGINAL_LOCATION\
                ConnectorGroupField=CONNECTOR_GROUP\
                \
                [Viewing]\
                DistributedConnectorHost=${IdolNiFiInstance.PrivateIp}\
                DistributedConnectorPort=10000\
                LegacyRendering=TRUE\
                #' /opt/view/view.cfg

          services:
            sysvinit:
              view:
                enabled: true
                ensureRunning: true

        configStartController:
          commands:
            01-setLicenseServer:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/controller/idol.common.cfg"
            02-setClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/controller/idol.common.cfg"

          services:
            sysvinit:
              controller:
                enabled: true
                ensureRunning: true

        configAddServicesToController:
          commands:
            01-addContentToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/content/content.exe&type=content&name=agentstore&InitScriptPath=/etc/init.d/content"'
            02-addCommunityToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/community/community.exe&type=community&name=community&InitScriptPath=/etc/init.d/community"'
            03-addViewToController:
              command: 'curl "http://localhost:41200/action=addService&ExecPath=/opt/view/view.exe&type=view&name=view&InitScriptPath=/etc/init.d/view"'

        configStartCoordinator:
          files:
            /opt/coordinator/register_content_engine_controllers.sh:
              content: !Sub |
                #!/bin/bash -xe

                function registerContentEngineControllers() {
                  #Parse Content IP addresses and register their controllers
                  NUM_CONTENT_IPS=$(echo '${IdolContentWaitCondition.Data}' | python -c "import sys, json; print len(json.load(sys.stdin).values())")
                  LOOP_MAX=$((NUM_CONTENT_IPS-1))
                  i=0
                  while [[ $i -le $LOOP_MAX ]]
                  do
                      RESP=$(curl "http://localhost:40200/action=addController&connectByHostName=true&HostName=content-instance-$i&Port=41200")
                      echo $RESP
                      ((i = i + 1))
                  done
                }

                registerContentEngineControllers
              owner: "root"
              group: "root"
              mode: "000500"

          commands:
            01-setLicenseHost:
              command: "sed -i \"s/LicenseServerHost=localhost/LicenseServerHost=license-server-instance/\" /opt/coordinator/idol.common.cfg"
            02-setRoleClients:
              command: "sed -i \"s/Clients=localhost/Clients=*/\" /opt/coordinator/idol.common.cfg"

          services:
            sysvinit:
              coordinator:
                enabled: true
                ensureRunning: true

        configAddControllers:
          commands:
            01-addContents:
              command: "/opt/coordinator/register_content_engine_controllers.sh"
            02-addDAH:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dah-instance&Port=41200\""
            03-addDIH:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=dih-instance&Port=41200\""
            04-addStaticServers:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=static-servers-instance&Port=41200\""
            05-addLicenseServer:
              command: "curl \"http://localhost:40200/action=addController&connectByHostName=true&HostName=license-server-instance&Port=41200\""
              


        configStartUIs:
          packages:
            yum:
              jq: []

          commands:
            01-adjustFindHomePermissions:
              command: "chmod -R 777 home"
              cwd: "/opt/find"
            02-configureFind:
              command: "jq '.login.community.host = \"localhost\"' config.json | jq '.login.defaultLogin.username=null' | jq '.login.defaultLogin.password=null' | jq '.login.method=\"autonomy\"' | jq '.content.host = \"dah-instance\"' | jq '.content.port = 9060' | jq '.view.host = \"localhost\"' | jq '.mmap.enabled = false' > config_rewrite.json"
              cwd: "/opt/find/home"
            03-useNewFindConfiguration:
              command: "mv config_rewrite.json config.json"
              cwd: "/opt/find/home"
            04-setFindConfigOwner:
              command: "chown find:find config.json"
              cwd: "/opt/find/home"
            05-resetFindHomePermissions:
              command: "chmod 755 home && chmod 664 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*"
              cwd: "/opt/find"
            06-adjustSiteAdminHomePermissions:
              command: "chmod -R 777 home"
              cwd: "/opt/siteadmin"
            07-configureSiteAdmin:
              command: "jq '.login.defaultLogin.username = null' config.json | jq '.login.defaultLogin.password = null' | jq '.login.method = \"autonomy\"' | jq '.login.community.host = \"localhost\"' | jq '.coordinator.host = \"localhost\"' > config_rewrite.json"
              cwd: "/opt/siteadmin/home"
            08-useNewSiteAdminConfiguration:
              command: "mv config_rewrite.json config.json"
              cwd: "/opt/siteadmin/home"
            09-setSiteAdminConfigOwner:
              command: "chown siteadmin:siteadmin config.json"
              cwd: "/opt/siteadmin/home"
            10-adresetSiteAdminHomePermissions:
              command: "chmod 755 home && chmod 644 home/config.json && chmod 755 home/logs && chmod 644 home/logs/*"
              cwd: "/opt/siteadmin"

          services:
            sysvinit:
              find:
                enabled: true
                ensureRunning: true
              siteadmin:
                enabled: true
                ensureRunning: true

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

    Properties:
      IamInstanceProfile: !Ref PrivateProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLStaticServers ]
      InstanceType: !Ref StaticServersInstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt IdolUIsSecurityGroup.GroupId
        - !GetAtt IdolAgentstoreSecurityGroup.GroupId
        - !GetAtt CommunitySG.GroupId
        - !GetAtt ViewSG.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          # do we need some error handling between thene cfn-inits?
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c instanceSetup &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startAgentstore &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startCommunity &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c bootstrapUsers &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startView &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startController &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c addServicesToController &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startCoordinator &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c addControllers &&
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region} -c startUIs
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolStaticServersInstance --region ${AWS::Region}

  IdolNiFiInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref PrivateProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, IDOLNiFi ]
      InstanceType: !Ref NiFiInstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt IdolNiFiSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Update aws-cfn-bootstrap to the latest
            yum install -y aws-cfn-bootstrap
            # Call cfn-init script to install files and packages:
            # Anything to do here?
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolNiFiInstance --region ${AWS::Region} -c instanceSetup &&
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource IdolNiFiInstance --region ${AWS::Region} -c importFlow
            # Call cfn-signal script to send a signal with exit code
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource IdolNiFiInstance --region ${AWS::Region}
      BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          instanceSetup: 
            - configInstanceSetup
          importFlow:
            - configImportFlow
        configInstanceSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.IdolNiFiInstance.Metadata.AWS::CloudFormation::Init
                action=../../opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource IdolNiFiInstance --region ${AWS::Region}
                runas=root
            /opt/mf/nifi/blank_flow.json:
              content: |
                {"flowContents":{"identifier":"7e70960f-62e9-3522-a743-6e043dc12ca6","name":"NiFi Flow","comments":"","position":{"x":0.0,"y":0.0},"processGroups":[],"remoteProcessGroups":[],"processors":[],"inputPorts":[],"outputPorts":[],"connections":[],"labels":[],"funnels":[],"controllerServices":[],"variables":{},"componentType":"PROCESS_GROUP","flowFileConcurrency":"UNBOUNDED","flowFileOutboundPolicy":"STREAM_WHEN_AVAILABLE"},"externalControllerServices":{},"parameterContexts":{},"flowEncodingVersion":"1.0"}
              owner: nifi
              group: nifi
              mode: "000644"
            /opt/mf/nifi/import_flow.sh:
              content: |
                #!/bin/bash -xe
                FLOWFILE=$1
                IDOL_HOST=$2
                IDOL_LICENSESERVER_HOST=$3
                S3_BUCKET=$4
                S3_ACCESS=$5
                S3_SECRET=$6
                export JAVA_HOME=/usr/lib/jvm/jre-11
                NIFITOOLKITCMD=/opt/mf/nifi/nifi-toolkit-1.13.2/bin/cli.sh
                echo Blanking root flow and services
                ROOTID=`${NIFITOOLKITCMD} nifi get-root-id`
                ${NIFITOOLKITCMD} nifi pg-disable-services -pgid ${ROOTID}
                ${NIFITOOLKITCMD} nifi pg-replace -pgid ${ROOTID} -i /opt/mf/nifi/blank_flow.json
                echo Importing IDOL NiFi Flow
                BUCKETID=`${NIFITOOLKITCMD} registry create-bucket -u https://localhost:18080 -bn idol-flow`
                echo BUCKETID=${BUCKETID}
                FLOWID=`${NIFITOOLKITCMD} registry create-flow -u https://localhost:18080 -b ${BUCKETID} -fn "IDOL NiFi Flow"`
                echo FLOWID=${FLOWID}
                FLOWVERSION=`${NIFITOOLKITCMD} registry import-flow-version -u https://localhost:18080 -f ${FLOWID} -i /opt/mf/resources/IDOL_NiFi_Flow_v3.json`
                echo FLOWVERSION=${FLOWVERSION}
                PROCESSGROUP=`${NIFITOOLKITCMD} nifi pg-import -b ${BUCKETID} -f ${FLOWID} -fv ${FLOWVERSION}`
                echo PROCESSGROUP=${PROCESSGROUP}
                PARAMCONTEXT=`${NIFITOOLKITCMD} nifi pg-get-param-context -pgid ${PROCESSGROUP}`
                echo PARAMCONTEXT=${PARAMCONTEXT}
                ${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn "IDOL Host" -pv "${IDOL_HOST}"
                ${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn "IDOL LicenseServer Host" -pv "${IDOL_LICENSESERVER_HOST}"
                ${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn "Amazon S3 Bucket" -pv "${S3_BUCKET}"
                echo Setting sensitive values...
                set +x
                ${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn "Amazon S3 Access Key" -pv "${S3_ACCESS}"
                ${NIFITOOLKITCMD} nifi set-param -pcid ${PARAMCONTEXT} -pn "Amazon S3 Secret Key" -pv "${S3_SECRET}"
                set -x
                echo Enabling services and starting processors...
                ${NIFITOOLKITCMD} nifi pg-enable-services -pgid ${PROCESSGROUP} -verbose
                ${NIFITOOLKITCMD} nifi pg-start -pgid ${PROCESSGROUP} -verbose
              owner: nifi
              group: nifi
              mode: "000744"

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/cfn-auto-reloader.conf

        configImportFlow:
          commands:
            01-flowimport:
              command: !Sub >
                sudo -u nifi /opt/mf/nifi/import_flow.sh /opt/mf/resources/IDOL_NiFi_Flow_v3.json
                ${IdolDIHInstance.PrivateIp}
                ${IdolLicenseServerInstance.PrivateIp}
                "${NiFiS3Bucket}"
                "${NiFiS3AccessKey}"
                "${NiFiS3SecretKey}"
              ignoreErrors: true

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

  IdolNiFiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable access to NiFi ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCIDR
        - IpProtocol: tcp
          FromPort: 10000
          ToPort: 10000
          CidrIp: !Ref PublicAccessCIDR

Outputs:
  Gateway:
    Description: IP of Gateway instance
    Value: !GetAtt GatewayProxyInstance.PublicIp

  Find:
    Description: URL of Find
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}/find/"

  SiteAdmin:
    Description: URL of SiteAdmin
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}/siteadmin/"

  IdolNiFi:
    Description: NiFi UI
    Value: !Sub "https://${IdolNiFiInstance.PublicIp}/nifi"

  IdolNiFiRegistry:
    Description: NiFi Registry UI
    Value: !Sub "https://${IdolNiFiInstance.PublicIp}/nifi-registry"

  LicenseServer:
    Description: URL of LicenseServer
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}/licenseserver/"

  DIHACIEndpoint:
    Description: ACI port of DIH
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}:9070/"

  DIHIndexEndpoint:
    Description: Index port of DIH
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}:9071/"

  AgentstoreACIEndpoint:
    Description: ACI port of Agentstore
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}:9050/"

  AgentstoreIndexEndpoing:
    Description: Index port of Agentstore
    Value: !Sub "https://${GatewayProxyInstance.PublicIp}:9051/"

  InitialPassword:
    Description: "Initial password for Find and SiteAdmin"
    Value: "Initial admin password can be found on the IdolStaticServersInstance in /opt/community/random_password.txt"
  